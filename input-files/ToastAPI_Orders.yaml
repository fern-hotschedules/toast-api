openapi: 3.0.1
info:
  contact:
    name: Toast developer support
  description: |
    The orders API includes operations that create, update, and retrieve information about restaurant
    guest orders.

    Information on orders includes the checks, the items ordered,
    prices, payments, and discounts.

    You can create a new order. The orders API includes an operation to retrieve the order prices before you `POST` the order.

    You can add items to an existing check.

    The orders API also allows you to retrieve payment information for the order and add a credit card payment to the order.
    You cannot update an existing payment, but you can update the tip amount.

    For delivery orders, you can update the delivery information.

    You can retrieve the applicable discounts for an order, and then add a discount to a menu item selection or a check.
  title: Toast Orders API
  version: 2.2.0
servers:
  - url: https://ws-api.toasttab.com/orders/v2
  - url: https://ws-sandbox-api.eng.toasttab.com/orders/v2
tags:
  - name: Orders
  - name: Payments
  - name: Discounts
paths:
  /payments:
    get:
      description: |
        Returns a list of the GUIDs for each payment made during
        one restaurant business day.

        The specific hours that make up a business
        day depend on the business day cutoff in the restaurant configuration,
        which is available from the restaurants API in the `closeoutHour`
        property.

        The business day for a restaurant is based on its local time (not UTC
        or local time for an API client).

        You must include one of the
        `paidBusinessDate`, `refundBusinessDate`, or `voidBusinessDate` query
        parameters.
      operationId: paymentsGet
      parameters:
        - description: The GUID of the restaurant used as the context of the request.
          in: header
          name: Toast-Restaurant-External-ID
          required: true
          schema:
            type: string
        - description: |
            Returns a list of the payments that were made during
            one business day.

            Specify the business day in the format yyyyMMdd.
            For example, `20170101`.
          in: query
          name: paidBusinessDate
          schema:
            type: string
        - description: |
            Returns a list of the payments that were refunded
            during one business day.

            Specify the business day in the format
            yyyyMMdd. For example, `20170101`.
          in: query
          name: refundBusinessDate
          schema:
            type: string
        - description: |
            Returns a list of the payments that were voided during
            one business day.

            Specify the business day in the format yyyyMMdd.
            For example, `20170101`.
          in: query
          name: voidBusinessDate
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                title: Response
                type: array
          description: A JSON array of the GUID identifiers for the payments.
      summary: Get payment identifiers
      tags:
        - Payments
  /payments/{guid}:
    get:
      description: "Returns a JSON `Payment` object containing detailed information about a  single payment, specified by its GUID."
      operationId: paymentsGuidGet
      parameters:
        - description: The GUID of the restaurant used as the context of the request.
          in: header
          name: Toast-Restaurant-External-ID
          required: true
          schema:
            type: string
        - description: The GUID for the payment you want to return.
          in: path
          name: guid
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
          description: Returns a JSON `Payment` object.
        "400":
          content: {}
          description: The GUID was malformed.
        "404":
          content: {}
          description: The specified payment was not found.
      summary: Get a payment
      tags:
        - Payments
  /prices:
    post:
      description: |
        Calculates the check price amounts, tax amounts, and service
        charges for an `Order` object you supply as a _required message
        body parameter_.

        The `prices` endpoint validates the order you
        submit to ensure all referenced data exists and that you include
        item selections in the expected structure with all required modifier
        options.

        Some values that would be present in the response data when
        creating an order are not present in the response data for the `prices`
        endpoint. For example, the order GUID is not set because the
        Toast platform does not create persistent data for the order.

        The calculated price can change between requests to the
        `prices` endpoint with the same `Order` object if enough time
        passes between the requests. The difference in price is
        possible because the restaurant configuration can change and
        because some pricing configuration is based on time and date
        schedules.
      operationId: pricesPost
      parameters:
        - description: |
            The identifier of the restaurant to be used for this price
            calculation.
          in: header
          name: Toast-Restaurant-External-ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: |
          A _required_ JSON `Order` object containing information about
          the checks, item selections, modifier options, and other parts
          of the order.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
          description: |
            Success. The response body contains a JSON `Order` object with
            values for check amounts, taxes, service charges, and other parts
            of the order.

            Because this endpoint only calculates prices,
            no parts of the order persist in the Toast platform. There are no
            GUIDs in the response object.
        "400":
          content: {}
          description: |
            Either the request contains data that is not supported by
            the current version of the API as described, or the order
            contains an item that is negatively priced.
        "403":
          content: {}
          description: |
            The API client does not have access to the restaurant, the
            API client does not have the `orders:read` scope, or both.
        "404":
          content: {}
          description: |
            An entity referenced in the order does not exist, or
            belongs to a restaurant that the API client is not
            authorized to access.
        "413":
          content: {}
          description: |
            The number of checks in the submitted order exceeds the limit.
        "415":
          content: {}
          description: |
            The request did not have `application/json` in the
            `Content-Type` HTTP header field.
        "500":
          content: {}
          description: |
            An unexpected internal error occurred. The
            `requestId` that is attached to the error can be referenced by
            the Toast support team.
      summary: Get order prices
      tags:
        - Orders
      x-codegen-request-body-name: body
  /orders/{guid}:
    get:
      description: "Retrieves detailed information about a single order, specified by its GUID."
      operationId: ordersGuidGet
      parameters:
        - description: The identifier of the restaurant where this order was placed.
          in: header
          name: Toast-Restaurant-External-ID
          required: true
          schema:
            type: string
        - description: The GUID for the order to be returned.
          in: path
          name: guid
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: A JSON Order object.
        "400":
          content: {}
          description: The GUID was malformed.
        "404":
          content: {}
          description: The specified order was not found.
        "500":
          content: {}
          description: There was a problem serializing the order entity.
      summary: Get an order
      tags:
        - Orders
  /ordersBulk:
    get:
      description: |
        Returns an array of `Order` objects containing detailed
        information about all of the orders opened during a period of time.

        You can return the orders for either a specific period of time
        or for one business day.

        * Specify both `startDate` and `endDate` to return the orders
          modified during that period of time.

        * Specify the `businessDate` to return the orders promised
          during that business day.
      operationId: ordersBulkGet
      parameters:
        - description: |
            The identifier for the restaurant that processed the orders.
          in: header
          name: Toast-Restaurant-External-ID
          required: true
          schema:
            type: string
        - description: |
            The inclusive start date and time. The results include orders with a modified
            date and time that occur at or after the `startDate`,
            but before the `endDate`.

            Use ISO-8601 format for the date and time, including a decimal fraction of
            a second. For example, `2016-01-01T14:13:12.000+0400`. URL encode the date
            and time value.

            The date must be after
            2015-12-01T00:00:00.000+0000.
          in: query
          name: startDate
          schema:
            format: ISO-8601
            type: string
        - description: |
            The exclusive end date and time. The results exclude any orders that have
            a modified date and time that occurs at or after `endDate`.

            Use ISO-8601 format for the date and time, including a decimal
            fraction of a second. For example, `2016-01-01T14:13:12.000+0400`. URL
            encode the date and time value.

            The `endDate` date and time
            must be later than the `startDate` parameter value.
          in: query
          name: endDate
          schema:
            format: ISO-8601
            type: string
        - description: |
            The business date that same-day orders opened or that
            scheduled orders are promised, in the format `yyyymmdd`.

            The business day of an order is determined by the time the
            order is opened or promised in the local time zone, and the
            restaurant's business day cutoff time, which is available
            from  the `General` object of the restaurants API in the
            `closeoutHour` property.
          in: query
          name: businessDate
          schema:
            type: string
        - description: |
            The maximum number of objects to return in the array. If the
            number of objects selected by your request is greater than
            the `pageSize`, the API uses response pagination for the
            remaining objects.

            The maximum `pageSize` is `100`.

            For more information, see [the _Toast Developer Guide_](https://doc.toasttab.com/doc/devguide/apiResponseDataPagination.html).
          in: query
          name: pageSize
          schema:
            type: integer
        - description: |
            The sequence number of the set of objects to return in
            paginated response data.

            For example, if you set the
            `pageSize` parameter to `10`, and you set `page` to `2`, the
            API returns a set of objects that starts with the eleventh
            object.

            For more information, see [the _Toast Developer Guide_](https://doc.toasttab.com/doc/devguide/apiResponseDataPagination.html).
          in: query
          name: page
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Order'
                title: Response
                type: array
          description: |
            A JSON array of `Order` objects for each order processed
            during the period of time that you specify in your request.
        "400":
          content: {}
          description: |
            The request contains data that is not supported by the API.
        "500":
          content: {}
          description: |
            An unexpected internal error occurred. The
            `requestId` that is attached to this error can be referenced by
            the Toast support team.
      summary: Get multiple orders
      tags:
        - Orders
  /orders/{orderGuid}/checks/{checkGuid}/payments:
    post:
      description: |
        Adds one or more payments to a check in an existing order. Include
        information about the payments in an array of `Payment` objects in the
        message body. Specify the Toast platform GUID of the order
        and check in REST path parameters.

        For more information, see <a
        href="https://doc.toasttab.com/doc/devguide/apiAddingPaymentsToACheck.html">
        the _Toast Developer Guide_</a>.
      operationId: ordersChecksPaymentsPost
      parameters:
        - description: |
            The Toast platform identifier of the order that you are
            adding payments to.
          in: path
          name: orderGuid
          required: true
          schema:
            type: string
        - description: |
            The Toast platform identifier of the check that you are
            adding payments to.
          in: path
          name: checkGuid
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/Payment'
              type: array
        description: |
          An array of JSON `Payment` objects containing information about the payments you are adding.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: |
            A JSON `Order` object that includes the payments that you added.
      summary: Post payments
      tags:
        - Payments
      x-codegen-request-body-name: body
  /orders/{orderGuid}/checks/{checkGuid}/payments/{paymentGuid}:
    patch:
      description: |
        Updates the tip amount in an existing payment for a check in an
        order. Include the new `tipAmount` value in a `Payment` object
        in the message body.

        This endpoint does not allow any other
        `Payment` object value for a `PATCH` request.

        Specify the Toast
        platform GUID of the order, check, and payment in REST path
        parameters.

        For more information, see <a
        href="https://doc.toasttab.com/doc/devguide/apiUpdatingTipsInAPayment.html">
        the _Toast Developer Guide_</a>.
      operationId: ordersOrderGuidChecksCheckGuidPaymentsPaymentGuidPatch
      parameters:
        - description: |
            The Toast platform identifier of the order that you are
            updating a tip in.
          in: path
          name: orderGuid
          required: true
          schema:
            type: string
        - description: |
            The Toast platform identifier of the check that you are
            updating a tip in.
          in: path
          name: checkGuid
          required: true
          schema:
            type: string
        - description: |
            The Toast platform identifier of the payment that you are
            updating a tip in.
          in: path
          name: paymentGuid
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              example:
                tipAmount: 3.25
              type: object
        description: |
          A JSON `Payment` object
          containing the `tipAmount` value that will replace any
          existing tip amount for the payment.

          Do not include any
          value other than `tipAmount`.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: |
            A JSON `Order` object
            that includes the tip amount that you updated.
      summary: Update a tip amount
      tags:
        - Payments
      x-codegen-request-body-name: body
  /orders/{orderGuid}/checks/{checkGuid}/selections:
    post:
      description: "Adds one or more items to an existing check in an order.\n\nInclude information about the items in an array of `Selection` objects in the\nmessage body.\n\nSpecify the Toast platform GUID of the order and\ncheck in REST path parameters.\n\nFor more information, see \n<a href=\"https://doc.toasttab.com/doc/devguide/apiAddingItemsToACheck.html\">the \n_Toast Developer Guide_</a>.\n"
      operationId: ordersOrderGuidChecksCheckGuidSelectionsPost
      parameters:
        - description: The identifier of the restaurant.
          in: header
          name: Toast-Restaurant-External-ID
          required: true
          schema:
            type: string
        - description: |
            The Toast platform identifier of the order that you are
            adding items to.
          in: path
          name: orderGuid
          required: true
          schema:
            type: string
        - description: |
            The Toast platform identifier of the check that you are
            adding items to.
          in: path
          name: checkGuid
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/Selection'
              type: array
        description: |
          An array of JSON `Selection` objects that identify the menu items you are adding.
        required: true
      responses:
        "200":
          content: {}
          description: |
            Success. The response body contains the full order JSON, including the `Selection` objects with the items from the original check and the newly added ones you included.
        "400":
          content: {}
          description: |
            The request contains data that is not supported by the API.
        "404":
          content: {}
          description: |
            An entity referenced in the order does not exist at the restaurant.
        "500":
          content: {}
          description: |
            An unexpected internal error occurred. The `requestId` that is attached to this error can be referenced by the Toast support team.
      summary: Add items to a check
      tags:
        - Orders
      x-codegen-request-body-name: body
  /orders/{orderGuid}/checks/{checkGuid}/appliedDiscounts:
    post:
      description: "Adds one or more check-level discounts to a check in an\nexisting order. Include an array of `Discount` objects in the\nmessage body.\n\nFor more information, see \n<a href=\"https://doc.toasttab.com/doc/devguide/apiDiscountingOrders.html#apiAddingDiscountsToChecks\">\nthe _Toast Developer Guide_</a>.\n"
      operationId: ordersChecksAppliedDiscountsPost
      parameters:
        - description: |
            The Toast platform identifier of the order that you are
            adding a discount to.
          in: path
          name: orderGuid
          required: true
          schema:
            type: string
        - description: |
            The Toast platform identifier of the check that you are
            adding a discount to.
          in: path
          name: checkGuid
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: |
          A JSON array of `Discount` objects that identify the discounts you are adding.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: |
            A JSON `Order` object that includes the discount you added.
      summary: Add check-level discounts
      tags:
        - Discounts
      x-codegen-request-body-name: body
  /orders/{orderGuid}/checks/{checkGuid}/selections/{selectionGuid}/appliedDiscounts:
    post:
      description: |
        Adds one or more item-level discounts to menu item selections
        in a check in an existing order. Include an array of `Discount` objects in the
        message body.

        For more information, see <a
        href="https://doc.toasttab.com/doc/devguide/apiDiscountingOrders.html#apiAddingDiscountsToChecks">
        the _Toast Developer Guide_</a>.
      operationId: ordersChecksSelectionsAppliedDiscountsPost
      parameters:
        - description: |
            The Toast platform identifier of the order that you are
            adding a discount to.
          in: path
          name: orderGuid
          required: true
          schema:
            type: string
        - description: |
            The Toast platform identifier of the check that you are
            adding a discount to.
          in: path
          name: checkGuid
          required: true
          schema:
            type: string
        - description: |
            The Toast platform identifier of the menu item selection
            that you are adding a discount to.
          in: path
          name: selectionGuid
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: |
          A JSON array of `Discount` objects that identify the discounts you are adding.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: |
            A JSON `Order` object that includes the discount you added.
      summary: Add item-level discounts
      tags:
        - Discounts
      x-codegen-request-body-name: body
  /orders/{orderGuid}/deliveryInfo:
    patch:
      description: "Updates the delivery information of an order that uses the `DELIVERY` dining option.\nYou can use this endpoint to update the delivery time, dispatch time, the\nemployee who is delivering the order, the delivery state, or a\ncombination of the four.\n\nSpecify the Toast platform GUID of the\norder in the `PATCH` path parameters. Returns a JSON\n`Order` object if successful.\n\nFor more information, see \n<a href=\"https://doc.toasttab.com/doc/devguide/apiUpdatingDeliveryInfoForAnOrder.html\">\nthe _Toast Developer Guide_</a>.\n"
      operationId: ordersOrderGuidDeliveryInfoPatch
      parameters:
        - description: The identifier of the restaurant.
          in: header
          name: Toast-Restaurant-External-ID
          required: true
          schema:
            type: string
        - description: |
            The Toast platform identifier of the order that you are
            updating the delivery information for.
          in: path
          name: orderGuid
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/DeliveryInfo'
              type: array
        description: |
          A JSON `deliveryInfo` object
          containing the delivery information you want to update for an order.

          You can update the `deliveredDate`, `dispatchedDate`, `deliveryState`, or
          `DeliveryEmployee`.

          These are the only values you can update with this endpoint.
        required: true
      responses:
        "200":
          content: {}
          description: "Success. The response body contains the full order JSON, including information you updated in the `deliveryInfo` object."
        "400":
          content: {}
          description: |
            The request contains data that is not supported by the API.
      summary: Update delivery information
      tags:
        - Orders
      x-codegen-request-body-name: body
  /orders:
    get:
      description: |
        Returns a list of the GUIDs of all orders opened during a period of
        time. You can return the list of orders for either a period of up to
        one hour or for one business day.
        * Specify both `startDate` and `endDate` to return the list of orders
          modified during a period of up to one hour.
        * Specify the `businessDate` to return the list of orders promised
          for delivery during a business day.
      operationId: ordersGet
      parameters:
        - description: The identifier for the restaurant to retrieve orders from.
          in: header
          name: Toast-Restaurant-External-ID
          required: true
          schema:
            type: string
        - description: |-
            \
            The inclusive start date and time. The results exclude orders with an earlier modified date and time.
            Use ISO-8601 format for the date and time, including a decimal fraction of a second. For example, `2016-01-01T14:13:12.000+0400`. URL encode the date and time value.
            The date must be after 2015-12-01T00:00:00.000+0000.
          in: query
          name: startDate
          schema:
            format: ISO-8601
            type: string
        - description: |2
            The exclusive end date and time. The results exclude orders with an equal
            or later modified date and time.

            Use ISO-8601 format for the date and time, including a decimal fraction of a
            second. For example,
            `2016-01-01T14:13:12.000+0400`. URL encode the date and time value.

            The `endDate` date and time must be later than the `startDate`
            parameter value.
          in: query
          name: endDate
          schema:
            format: ISO-8601
            type: string
        - description: |
            The business date that same-day orders opened or that
            scheduled orders are promised, in the format `yyyyMMdd`.

            The business day of an order is determined by the time the order is opened or
            promised in the local time zone, and by the restaurant's business day
            cutoff time, which is available from  the `General` object of the
            restaurants API in the `closeoutHour` property.
          in: query
          name: businessDate
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                title: Response
                type: array
          description: A JSON array of the GUID identifiers for orders.
        "400":
          content: {}
          description: "The request contains data that is not supported by the current version of the API as described. For example, specifying credit card as the payment type."
        "500":
          content: {}
          description: An unexpected internal error occurred. The `requestId` that is attached to this error can be referenced by Toast.
      summary: Get order identifiers (deprecated)
      tags:
        - Orders
    post:
      description: Submits an order to the server. Returns a JSON `Order` object if successful.
      operationId: ordersPost
      parameters:
        - description: The identifier for the restaurant where this order was placed.
          in: header
          name: Toast-Restaurant-External-ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        description: A JSON object containing information about an order.
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                guid: 89488287-f259-435b-a654-0bc391596af0
                entityType: Order
                server:
                  guid: c89d1e72-1888-469f-a24b-506c66eafab7
                  entityType: RestaurantUser
                lastModifiedDevice: {}
                source: API
                businessDate: 20210730
                voided: false
                estimatedFulfillmentDate: 2021-07-30T12:12:46.235+0000
                requiredPrepTime: PT15M
                approvalStatus: NEEDS_APPROVAL
                deliveryInfo:
                  address1: 401 Park Drive
                  address2: Suite 801
                  city: Boston
                  state: MA
                  zipCode: "02215"
                  latitude: 42.3446671
                  longitude: -71.1023575
                  notes: Please ring the doorbell.
                numberOfGuests: 1
                diningOption:
                  guid: 18855a26-40d4-4a8f-b484-c6af211dd597
                  entityType: DiningOption
                openedDate: 2021-07-30T11:57:46.235+0000
                checks:
                  - guid: cbcb6fd5-d973-4e44-9b91-2abcee5ea6cd
                    entityType: Check
                    displayNumber: pdesjardins-api-1627646263
                    payments:
                      - guid: 88642b2d-c359-4b96-bb8e-9cb3f5c2ac6a
                        entityType: OrderPayment
                        lastModifiedDevice: {}
                        refundStatus: NONE
                        type: OTHER
                        checkGuid: cbcb6fd5-d973-4e44-9b91-2abcee5ea6cd
                        otherPayment:
                          guid: 0dc19214-d29e-4ab9-a773-27e5812999c7
                          entityType: AlternatePaymentType
                        paidDate: 2021-07-30T11:57:46.237+0000
                        orderGuid: 89488287-f259-435b-a654-0bc391596af0
                        paymentStatus: CAPTURED
                        amount: 8.5
                        tipAmount: 0.0
                        createdDevice: {}
                        paidBusinessDate: 20210730
                    appliedDiscounts: []
                    lastModifiedDevice: {}
                    voided: false
                    paymentStatus: OPEN
                    amount: 5.0
                    taxExempt: false
                    openedDate: 2021-07-30T11:57:46.235+0000
                    totalAmount: 5.0
                    selections:
                      - guid: 2c8b6ece-c503-4f85-aed7-6a8c6526ba0d
                        entityType: MenuItemSelection
                        deferred: false
                        preDiscountPrice: 5.0
                        displayName: 蟹餅  CRAB CAKES
                        appliedDiscounts: []
                        modifiers: []
                        seatNumber: -1
                        fulfillmentStatus: NEW
                        salesCategory:
                          guid: c0915e46-341e-4ec0-b46e-cb87fab729fd
                          entityType: SalesCategory
                        selectionType: NONE
                        price: 5.0
                        voided: false
                        appliedTaxes: []
                        itemGroup:
                          guid: 881472e6-dd94-48c6-b5c6-25e51a864208
                          entityType: MenuGroup
                        item:
                          guid: 9c59d4ab-8242-450f-8f36-b16e1b3ab802
                          entityType: MenuItem
                        taxInclusion: NOT_INCLUDED
                        quantity: 1.0
                        receiptLinePrice: 5.0
                        unitOfMeasure: NONE
                        tax: 0.0
                        diningOption:
                          guid: 18855a26-40d4-4a8f-b484-c6af211dd597
                          entityType: DiningOption
                        createdDate: 2021-07-30T11:57:46.269+0000
                        modifiedDate: 2021-07-30T11:57:46.269+0000
                    createdDate: 2021-07-30T11:57:46.282+0000
                    deleted: false
                    createdDevice: {}
                    modifiedDate: 2021-07-30T11:57:46.282+0000
                    taxAmount: 0.0
                    appliedServiceCharges: []
                    customer:
                      guid: 970e92e6-33b3-4caa-876b-2c6ef528ef4e
                      entityType: Customer
                      firstName: Severe
                      lastName: Thibault
                      phone: "5555555555"
                      email: severe@example.com
                deleted: false
                createdDevice: {}
                createdDate: 2021-07-30T11:57:46.286+0000
                modifiedDate: 2021-07-30T11:57:46.286+0000
                pricingFeatures:
                  - TAXESV2
              schema:
                $ref: '#/components/schemas/OrderResponse'
          description: "A JSON `Order` object that has been persisted in Toast. The returned Order contains generated property values for the check amounts, taxes, service charges, and GUIDs for persisted entities."
        "400":
          content: {}
          description: "Either the request contains data that is not supported by the current version of the API as described (e.g. specifying credit card as the payment type.), or the order contains an item that is negatively priced."
        "404":
          content: {}
          description: "An entity referenced in the order does not exist, or belongs to a restaurant the authenticated client is not authorized to access."
        "413":
          content: {}
          description: The number of checks in the submitted order exceeds the limit.
        "415":
          content: {}
          description: The request did not have "application/json" in the Content-Type header.
        "500":
          content: {}
          description: An unexpected internal error occurred. There is a requestId attached to this error that can be referenced by Toast.
      summary: Post an order
      tags:
        - Orders
      x-codegen-request-body-name: body
  /applicableDiscounts:
    post:
      description: |
        Returns an array of `ApplicableDiscount`
        objects that contain information about the discounts that apply
        to the checks and menu item selections in an order.

        Each `ApplicableDiscount` object contains information that you can
        use to determine which items and checks are eligible for the
        discount.

        If you include a `promoCode` value in the
        `ApplicableDiscount` object, the `applicableDiscounts` endpoint
        returns the only the discounts that are associated with that
        promotional code.
      operationId: applicableDiscountsPost
      parameters:
        - description: The identifier of the restaurant.
          in: header
          name: Toast-Restaurant-External-ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicableDiscountsRequest'
        description: |
          A JSON `ApplicableDiscountsRequest` object containing
          information about an order, and an optional `promoCode`.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApplicableDiscount'
                title: ApplicableDiscounts
                type: array
          description: A JSON array of `ApplicableDiscount` objects.
        "400":
          content: {}
          description: Invalid arguments
        "500":
          content: {}
          description: An unexpected internal error occurred. The `requestId` that is attached to this error can be referenced by Toast.
      summary: Get applicable discounts
      tags:
        - Discounts
      x-codegen-request-body-name: body
components:
  schemas:
    Order:
      allOf:
        - $ref: '#/components/schemas/ExternalReference'
        - $ref: '#/components/schemas/Order_allOf'
      description: "A Toast platform order is composed of one or more checks. Each check has \none or more menu item selections.\n"
    Check:
      allOf:
        - $ref: '#/components/schemas/ExternalReference'
        - $ref: '#/components/schemas/Check_allOf'
      description: Represents a single check within an order.
    AppliedLoyaltyInfo:
      allOf:
        - $ref: '#/components/schemas/ToastReference'
        - $ref: '#/components/schemas/AppliedLoyaltyInfo_allOf'
      description: Information about the customer loyalty program account associated with a check.
    Selection:
      allOf:
        - $ref: '#/components/schemas/ExternalReference'
        - $ref: '#/components/schemas/Selection_allOf'
      description: |
        A `Selection` object can represent either a primary item (for example,
        `Check.selections`) or a modifier (`Selection.modifiers`) selection.
        Quantity defaults to `1`.

        For a `POST` operation, all selections must have valid `item` and
        `itemGroup` fields. The `item` and `itemGroup` values can be `null` for
        `GET` requests. For example, they are `null` for gift cards and on special
        requests.

        To specify a modifier selection, add it to the `modifiers` list of
        another selection. Each modifier selection must have its `optionGroup` field
        set correctly, because a `MenuItem` can be included in multiple
        `MenuOptionGroups`, potentially with different prices or sizing.
    Payment:
      allOf:
        - $ref: '#/components/schemas/ExternalReference'
        - $ref: '#/components/schemas/Payment_allOf'
      description: Defines a payment.
    GiftCardInfo:
      allOf:
        - $ref: '#/components/schemas/ToastReference'
        - $ref: '#/components/schemas/GiftCardInfo_allOf'
      description: Reserved for future use.
    AppliedPreauthInfo:
      description: For internal use only.
      properties:
        guid:
          description: For internal use only.
          type: string
        token:
          description: For internal use only.
          type: string
        oneTimeUse:
          description: For internal use only.
          type: boolean
        preAuthAmount:
          description: For internal use only.
          format: double
          type: number
        cardType:
          description: For internal use only.
          enum:
            - VISA
            - MASTERCARD
            - AMEX
            - DISCOVER
            - JCB
            - DINERS
            - CITI
            - MAESTRO
            - LASER
            - SOLO
            - INTERAC
            - UNKNOWN
          type: string
        readerType:
          description: For internal use only.
          enum:
            - ACS_ACR31
            - BBPOS
            - BBPOS_MSR
            - IDTECH_SHUTTLE
            - INGENICO_ICM122
            - MAGTEK_BULLET
            - MAGTEK_DYNAMAG
            - MAGTEK_EDYNAMO
            - MAGTEK_UDYNAMO
          type: string
        last4CardDigits:
          description: For internal use only.
          type: string
        cardHolderFirstName:
          description: For internal use only.
          type: string
        cardHolderLastName:
          description: For internal use only.
          type: string
        cardHolderhash4:
          description: For internal use only.
          type: string
        cardHolderhash6:
          description: For internal use only.
          type: string
        magStripeName:
          description: For internal use only.
          type: string
        cardHolderExpirationMonth:
          description: For internal use only.
          type: string
        cardHolderExpirationYear:
          description: For internal use only.
          type: string
        useCount:
          description: For internal use only.
          type: integer
      required:
        - cardType
        - last4CardDigits
        - preAuthAmount
        - token
      type: object
    Customer:
      allOf:
        - $ref: '#/components/schemas/ToastReference'
        - $ref: '#/components/schemas/Customer_allOf'
    DeliveryInfo:
      description: Information related to delivery orders. Required if the dining option behavior is `DELIVERY`.
      example:
        deliveredDate: 2000-01-23T04:56:07.000+00:00
        zipCode: zipCode
        notes: notes
        deliveryEmployee: null
        address2: address2
        city: city
        address1: address1
        latitude: 0.8008281904610115
        deliveryState: PENDING
        state: state
        dispatchedDate: 2000-01-23T04:56:07.000+00:00
        longitude: 6.027456183070403
      properties:
        address1:
          description: |
            The first line of the street address of the delivery destination.
          type: string
        address2:
          description: |
            The second line of the street address of the delivery destination.
          type: string
        city:
          description: |
            The name of the city or town of the delivery destination.
          type: string
        state:
          description: |
            The postal abbreviation of the state or province of the
            delivery destination.

            The abbreviation must be in ISO 3166-2
            format (two capital letters).
          format: ISO 3166-2
          type: string
        zipCode:
          description: |
            The postal or zip code of the delivery destination.
          type: string
        latitude:
          description: |
            The north/south geographic coordinate of the delivery
            destination, in decimal format.
          format: double
          type: number
        longitude:
          description: |
            The east/west geographic coordinate of the delivery
            destination, in decimal format.
          format: double
          type: number
        notes:
          description: |
            Additional instructions or information about the delivery.
          type: string
        deliveredDate:
          description: |
            The date and time that the delivery employee indicated in the Toast POS app that
            the order was delivered. Response only.

            This value is only set when the dining option for the order is
            `DELIVERY`. For other dining options, the value is `null`.
          format: date-time
          type: string
        dispatchedDate:
          description: |
            The date and time that the restaurant indicated in the Toast POS app that the
            order was available for delivery and assigned to a delivery
            employee.

            This value is only set when the
            dining option for the order is `DELIVERY`. For other dining
            options, the value is `null`.
          format: date-time
          type: string
        deliveryEmployee:
          $ref: '#/components/schemas/ExternalReference'
        deliveryState:
          description: "An internal representation of the state of a delivery order.\n\nValid values:\n\n* `PENDING` - The delivery is not dispatched. This corresponds to the **Unassigned** tab of\nthe Delivery screen of the Toast POS app.\n\n* `IN_PROGRESS` - The order is on the way to the destination. This corresponds to \nthe **En Route** tab of the Delivery screen of the Toast POS app.\n\n* `PICKED_UP` - The employee who delivers the order has picked up the order from the\nrestaurant.\n\n* `DELIVERED` - The order was delivered. This corresponds to the **Delivered** tab of the\nDelivery screen of the Toast POS app.\n"
          enum:
            - PENDING
            - IN_PROGRESS
            - PICKED_UP
            - DELIVERED
          type: string
      required:
        - address1
        - city
        - state
        - zipCode
      type: object
    AppliedServiceCharge:
      allOf:
        - $ref: '#/components/schemas/ExternalReference'
        - $ref: '#/components/schemas/AppliedServiceCharge_allOf'
      description: |
        A service charge that is added to a check. A service charge can represent an upcharge such as a gratuity or a delivery fee.

        Whether the upcharge is taxable is defined in the restaurant-configured `serviceCharge`.

        The fields on the `AppliedServiceCharge` are calculated based on the referenced `ServiceCharge` configuration.
    AppliedTaxRate:
      allOf:
        - $ref: '#/components/schemas/ToastReference'
        - $ref: '#/components/schemas/AppliedTaxRate_allOf'
      description: A tax rate that is applied to an item or service charge.
    AppliedDiscountTrigger:
      description: The Selection that triggered the application of this discount
      properties:
        selection:
          $ref: '#/components/schemas/ExternalReference'
        quantity:
          description: The amount of the selection used to trigger the applied discount.
          format: double
          type: number
      type: object
    AppliedDiscount:
      allOf:
        - $ref: '#/components/schemas/ExternalReference'
        - $ref: '#/components/schemas/AppliedDiscount_allOf'
      description: |
        A discount applied to a check or item. The Toast platform calculates service
        charges before it applies discounts. The system calculates tax after applying
        discounts.

        In a `POST` request, you cannot apply open percent discounts. You can apply open amount discounts.
        You can only apply one discount to a menu item selection. For more information, see
        [the _Toast Developer Guide_](https://doc.toasttab.com/doc/devguide/apiDiscountingOrders.html).
    LoyaltyDetails:
      description: Information about the loyalty program discount that is applied to a check. The loyalty program account is identified in the `AppliedLoyaltyInfo` value for the check.
      properties:
        vendor:
          description: The specific loyalty program service provider that supports the loyalty account.
          enum:
            - TOAST
            - PUNCHH
            - PUNCHH2
            - PAYTRONIX
            - APPFRONT
            - INTEGRATION
          type: string
        referenceId:
          description: |
            The identifier of the loyalty program discount that
            is recognized by the loyalty program service provider.

            The Toast platform transmits the discount identifier to the service
            provider to determine the validity and amount of the discount.
          type: string
      required:
        - referenceId
        - vendor
      type: object
    Refund:
      description: A currency amount removed from a guest payment.
      properties:
        refundAmount:
          description: "The amount of the refund, excluding the tip."
          format: double
          type: number
        tipRefundAmount:
          description: The amount of the tip refund.
          format: double
          type: number
        refundDate:
          description: The date and time when the refund was made.
          format: date-time
          type: string
        refundBusinessDate:
          description: The business date (yyyyMMdd) on which this refund was created. Response only.
          type: integer
        refundTransaction:
          $ref: '#/components/schemas/ToastReference'
        refundStrategy:
          description: |
            For internal use only.
          enum:
            - LEGACY_INCLUDE_REFUND_IN_AMOUNT_DUE
            - IGNORE_REFUND_IN_AMOUNT_DUE
          type: string
      type: object
    Device:
      description: |
        The *Device ID* value that the Toast platform assigns to a specific Toast POS device.

        The `id` value is a unique identifier for a device.

        To find the ID for a Toast POS device, from the overflow  menu (⋮) select *Device Status* and then select the *Device* tab.
      properties:
        id:
          description: The physical id of the device
          type: string
      type: object
    VoidInformation:
      description: Information about a void applied to a check or item.
      properties:
        voidUser:
          $ref: '#/components/schemas/ExternalReference'
        voidApprover:
          $ref: '#/components/schemas/ExternalReference'
        voidDate:
          description: The date on which the void was made.
          format: date-time
          type: string
        voidBusinessDate:
          description: The business date (yyyyMMdd) on which the void was made. Response only.
          type: integer
        voidReason:
          $ref: '#/components/schemas/ExternalReference'
      type: object
    ConfigReference:
      allOf:
        - $ref: '#/components/schemas/ToastReference'
        - $ref: '#/components/schemas/ConfigReference_allOf'
      description: |
        A wrapper object containing identifier values for Toast platform entities.
    ExternalReference:
      allOf:
        - $ref: '#/components/schemas/ToastReference'
        - $ref: '#/components/schemas/ExternalReference_allOf'
      description: A wrapper object with fields that allow reference to a Toast platform entity by Toast GUID or a partner's identifier.
    ToastReference:
      description: A wrapper object with fields that allow reference to a Toast entity by Toast GUID.
      example:
        entityType: entityType
        guid: guid
      properties:
        guid:
          description: The GUID maintained by the Toast platform.
          type: string
        entityType:
          description: The type of object this is. Response only.
          type: string
      required:
        - entityType
        - guid
      type: object
    OrderResponse:
      example:
        orders:
          - null
      properties:
        orders:
          items:
            $ref: '#/components/schemas/Order'
          maxItems: 1
          minItems: 0
          type: array
      type: object
    ApplicableDiscountsRequest:
      description: |
        A wrapper object that contains an `Order` object and an optional
        promotional code.

        You include an `ApplicableDiscountsRequest`
        object in the message body of a `POST` request to the
        `applicableDiscounts` endpoint.
      example:
        promoCode: promoCode
        order: null
      properties:
        order:
          $ref: '#/components/schemas/Order'
        promoCode:
          description: |
            An optional promotional code. If you include a promotional
            code, the `applicableDiscounts` endpoint returns only
            discounts that are associated with that promotional code.
          type: string
      required:
        - order
      type: object
    ApplicableDiscount:
      description: |
        A wrapper object that contains information about a discount that you
        can apply to an order, and which checks or menu item selections
        you can apply it to.
      example:
        applicableChecks:
          - null
          - null
        discount:
          entityType: entityType
          guid: guid
        applicableSelections:
          - null
          - null
      properties:
        discount:
          $ref: '#/components/schemas/ToastReference'
        applicableChecks:
          description: |
            If the discount is applicable to a check, this value holds an
            array of `ExternalReference` objects containing the identifiers of the checks.
          items:
            $ref: '#/components/schemas/ExternalReference'
          type: array
        applicableSelections:
          description: |
            If the discount is applicable to a menu item selection, this
            value holds an array of `ExternalReference` objects containing
            the identifiers of the menu items.
          items:
            $ref: '#/components/schemas/ExternalReference'
          type: array
      required:
        - discount
      type: object
    UpdatePaymentRequest:
      description: |
        A wrapper object containing payment fields that you can update. Currently
        you are only allowed to update a payment's `tipAmount`.
      properties:
        tipAmount:
          description: |
            The amount tipped on a payment.
          format: double
          type: number
      type: object
    CurbsidePickupInfo:
      allOf:
        - $ref: '#/components/schemas/ToastReference'
        - $ref: '#/components/schemas/CurbsidePickupInfo_allOf'
      description: |
        Information that the restaurant can use to identify a guest when they arrive
        outside the restaurant to pick up their order. `transportDescription` is a required field.
    MoveItemRequest:
      description: |
        Reserved for future use.
      properties:
        selectionIds:
          additionalProperties:
            format: double
            type: number
          description: |
            Reserved for future use.
          type: object
        destCheckId:
          description: |
            Reserved for future use.
          type: string
      required:
        - destCheckId
        - selectionIds
      type: object
    SplitCheckRequest:
      description: |
        Reserved for future use.
      properties:
        selectionIds:
          additionalProperties:
            format: double
            type: number
          description: |
            Reserved for future use.
          type: object
      required:
        - selectionIds
      type: object
    DeliveryServiceInfo:
      allOf:
        - $ref: '#/components/schemas/ToastReference'
        - $ref: '#/components/schemas/DeliveryServiceInfo_allOf'
      description: |
        Reserved for future use.
    RefundDetails:
      description: |
        Information about refunded currency amounts for an item
        selection, modifier option, or service charge. The refund
        information includes separate values for the pre-tax value
        being refunded and the tax amount being refunded.
      properties:
        refundAmount:
          description: |
            The value of the menu item or service charge (excluding taxes) being
            refunded. Includes the value of any nested modifier options that
            increased the price of the item or modifier option (an upcharge for
            the modifier option).
          format: double
          type: number
        taxRefundAmount:
          description: |
            The tax amount being refunded.
          format: double
          type: number
        refundTransaction:
          $ref: '#/components/schemas/ToastReference'
      type: object
    MarketplaceFacilitatorTaxInfo:
      description: |
        Information about the taxes that a marketplace facilitator
        organization remits on behalf of a Toast platform restaurant.
        `POST` only. The orders API does not include the
        `MarketplaceFacilitatorTaxInfo` object in response data.

        **Note**: you can only include this information if your
        Toast API client is associated with a designated
        marketplace facilitator organization. Most Toast API
        clients do not create marketplace facilitator orders.
      properties:
        facilitatorCollectAndRemitTaxOrder:
          description: |
            Indicates whether a marketplace facilitator organization has
            paid the tax amounts for an order on behalf of the restaurant
            that fulfills the order.

            If you include this value, you indicate that the marketplace
            facilitator order uses the prices and tax amounts calculated
            by the Toast platform.

            If you include this value, you *must not* include the `taxes`
            value and you *must not* include the `externalPriceAmount`
            for menu item selections in the order.
          type: boolean
        taxes:
          description: |
            An array of `AppliedTaxRate` objects that describe the tax
            amounts that apply to a marketplace facilitator order.

            If you include this value, you must include an `externalPriceAmount`
            for each menu item selection in the order.
          items:
            $ref: '#/components/schemas/AppliedTaxRate'
          type: array
      type: object
    RemovedSelection:
      allOf:
        - $ref: '#/components/schemas/ToastReference'
        - $ref: '#/components/schemas/RemovedSelection_allOf'
      description: |
        For internal use only.
    Order_allOf:
      properties:
        openedDate:
          description: "The business date of the order.\n\nFor dine-in and as soon as possible (ASAP) orders, `openedDate` should match `createdDate`.\n\nFor scheduled orders, `openedDate` should match `promisedDate`.\n\nIf you do not provide a value for \n`openedDate` value when you `POST` a new order, the\nbusiness date of the order is set to the restaurant\nbusiness day that corresponds to the current date and\ntime.\n\nThe business date of an order is affected by the\nbusiness date cutoff time for a restaurant, which is\navailable from the restaurants API in the `closeoutHour` property.\n"
          format: date-time
          type: string
        modifiedDate:
          description: "The most recent date that the order, or a check or menu item selection in the order, was modified."
          format: date-time
          type: string
        promisedDate:
          description: |
            For scheduled orders, the date and time that the order is scheduled to be fulfilled.

            For dine-in and as soon as possible (ASAP) orders, `promisedDate` is `null`.
          format: date-time
          type: string
        channelGuid:
          description: For internal use only. The GUID representing the ordering channel that is attributed to the order. Examples of channels include Doordash and Toast Online Ordering.
          format: uuid
          type: string
        diningOption:
          $ref: '#/components/schemas/ExternalReference'
        checks:
          description: |
            The checks for this order. Most orders have one check.

            If the check is split, then there are multiple checks.
          items:
            $ref: '#/components/schemas/Check'
          minItems: 1
          type: array
        table:
          $ref: '#/components/schemas/ExternalReference'
        serviceArea:
          $ref: '#/components/schemas/ExternalReference'
        restaurantService:
          $ref: '#/components/schemas/ExternalReference'
        revenueCenter:
          $ref: '#/components/schemas/ExternalReference'
        source:
          description: |
            Indicates the way that the order was placed.

            Valid values:

            * `In Store`
            * `Online`
            * `Order-and-Pay-at-Table`
            * `API`
            * `Kiosk`
            * `Caller Id`
            * `Google`
            * `Invoice`
            * `Toast Pickup App`
            * `Toast Local`
            * `Branded Online Ordering`
            * `Catering`
            * `Catering Online Ordering`
            * `Grubhub` (deprecated)

            Response only.
          type: string
        duration:
          description: The number of seconds between creation and payment. Response only.
          type: integer
        deliveryInfo:
          $ref: '#/components/schemas/DeliveryInfo'
        requiredPrepTime:
          description: "The amount of time that it will take to prepare the order. This value overrides the \ndefault `deliveryPrepTime` or `takeoutPrepTime` that normally controls auto-firing for scheduled orders.\n\nYou can use `requiredPrepTime` to handle atypical orders that will take more time than usual for a restaurant to prepare.\n\nExpress the required preparation time in ISO-8601 duration format. Must be greater than zero and be an \nincrement of five minutes. For example, the value \"PT15M\" sets the required preparation time for the order to 15 minutes.\n"
          format: ISO-8601
          type: string
        estimatedFulfillmentDate:
          description: |
            The date and time that the order is expected to be ready for pickup or to be delivered.

            This value is only set when the order dining option uses the `DELIVERY` or `TAKE_OUT` dining behavior. For other dining options, the value is `null`.

            Response only.
          format: date-time
          type: string
        numberOfGuests:
          description: |
            The number of restaurant guests that are associated with the
            order. For example, for a dine-in order, this might be the
            number of guests at a table.
          type: integer
        voided:
          description: Set to `true` if this order was voided. Response only.
          type: boolean
        voidDate:
          description: The date on which this order was voided. Response only.
          format: date-time
          type: string
        voidBusinessDate:
          description: The business date (yyyyMMdd) on which this order was voided. Response only.
          type: integer
        paidDate:
          description: "The most recent date on which this order received payment. If not specified when `POST`ing, it is set to the current system time."
          format: date-time
          type: string
        closedDate:
          description: |
            The most recent date on which the order payment status changed to `CLOSED`.

            This status is not returned for the order. The order is simply `CLOSED` when all of the checks on the order are `CLOSED`.
          format: date-time
          type: string
        deletedDate:
          description: |
            The date and time when the order was deleted.

            The `deletedDate` value only
            applies when the `deleted` value is `true`.

            If `deleted` is `false`, the value
            of `deletedDate` is the UNIX epoch, `1970-01-01T00:00:00.000+0000`.
          format: date-time
          type: string
        deleted:
          description: |
            Set to `true` if this order is deleted. Response only.

            For example, if you combine a
            check into another order, the original order for the check is deleted.
          type: boolean
        businessDate:
          description: The business date (yyyyMMdd) on which the order was fulfilled. Response only.
          type: integer
        server:
          $ref: '#/components/schemas/ExternalReference'
        owner:
          $ref: '#/components/schemas/ExternalReference'
        pricingFeatures:
          description: Pricing features that this order is using.
          items:
            description: A specific pricing feature used to price out the order.
            enum:
              - TAXESV2
              - TAXESV3
            type: string
          type: array
        approvalStatus:
          description: |
            The current state of the order in the restaurant order
            fulfillment process. For example, the `approvalStatus`
            can indicate that an order is waiting for a restaurant
            employee to approve it or that the order is in a
            restaurant kitchen being fulfilled. Response only.

            Valid values:

            * `NEEDS_APPROVAL` - The order is created but will
            not be fulfilled by the restaurant until an employee
            approves it.

            * `APPROVED` - The order is being fulfilled by the
            restaurant or it was fulfilled in the past. Orders
            remain in this state indefinitely after they are
            fulfilled.

            * `FUTURE` - The order is expected to be fulfilled by the
            restaurant at a future date and time. Restaurant
            employees will receive information about the order at the
            date and time that it is ready to be fulfilled.

            * `NOT_APPROVED` - Restaurant employees received
            information about the order but did not approve it for
            fulfillment. An order enters this state after a period of
            time passes without a restaurant employee approving it.
          enum:
            - NEEDS_APPROVAL
            - APPROVED
            - FUTURE
            - NOT_APPROVED
          type: string
        guestOrderStatus:
          description: |
            Reserved for future use.
          type: string
        createdDevice:
          $ref: '#/components/schemas/Device'
        createdDate:
          description: The date and time that the Toast platform received the order.
          format: date-time
          type: string
        initialDate:
          description: Reserved for future use. Do not use the `initialDate` value for integration development.
          format: int64
          type: integer
        lastModifiedDevice:
          $ref: '#/components/schemas/Device'
        curbsidePickupInfo:
          $ref: '#/components/schemas/CurbsidePickupInfo'
        deliveryServiceInfo:
          $ref: '#/components/schemas/DeliveryServiceInfo'
        marketplaceFacilitatorTaxInfo:
          $ref: '#/components/schemas/MarketplaceFacilitatorTaxInfo'
        createdInTestMode:
          description: For internal use only.
          type: boolean
      required:
        - checks
        - diningOption
      type: object
      example: null
    Check_allOf:
      properties:
        createdDate:
          description: The date and time that the Toast platform received the check.
          format: date-time
          type: string
        openedDate:
          description: "The date on which this check was opened. If not specified, it is set to the current system time."
          format: date-time
          type: string
        closedDate:
          description: The most recent date on which this check's payment status was set to `CLOSED`.
          format: date-time
          type: string
        modifiedDate:
          description: The most recent date on which this check was modified.
          format: date-time
          type: string
        deletedDate:
          description: |
            The date on which this check was deleted.

            `deletedDate` is only applicable when `deleted` is true.

            If `deleted` is false, then `deletedDate` is set to the UNIX epoch, `1970-01-01T00:00:00.000+0000`.
          format: date-time
          type: string
        deleted:
          description: Set to `true` if this check was deleted.
          type: boolean
        selections:
          items:
            $ref: '#/components/schemas/Selection'
          type: array
        customer:
          $ref: '#/components/schemas/Customer'
        appliedLoyaltyInfo:
          $ref: '#/components/schemas/AppliedLoyaltyInfo'
        taxExempt:
          default: false
          description: Set to `true` if this check is tax exempt. The tax exempt number is not yet supported.
          type: boolean
        displayNumber:
          description: Generally starts at one each day and counts up. The Toast platform fills this in if it is not specified when the order is POSTed. Not guaranteed to be unique.
          type: string
        appliedServiceCharges:
          description: Any restaurant-configured service charges that applied to this check.
          items:
            $ref: '#/components/schemas/AppliedServiceCharge'
          type: array
        amount:
          description: The total calculated price of this check after discounts. Does not include taxes. Response only.
          format: double
          type: number
        netAmount:
          description: For internal use only.
          format: double
          type: number
        taxAmount:
          description: The calculated tax amount. Includes service charge and item level taxes. Response only.
          format: double
          type: number
        tipAmount:
          description: For internal use only.
          format: double
          type: number
        totalAmount:
          description: The total calculated price of this check including discounts and taxes. Not affected by refunds. Response only.
          format: double
          type: number
        totalDiscountAmount:
          description: For internal use only.
          format: double
          type: number
        payments:
          description: Payments made on this check.
          items:
            $ref: '#/components/schemas/Payment'
          minItems: 0
          type: array
        tabName:
          description: |
            The name of the tab on this check. This displays on the KDS (Kitchen Display System) for pending orders.

            The `tabName` value can contain up to 255 characters.
          type: string
        paymentStatus:
          description: |
            The payment status of this check.

            Valid values:

            * `OPEN` - There is an outstanding balance.

            * `PAID` - A credit card payment was applied, but the tip has not been adjusted.

            * `CLOSED`  - There is no remaining amount due on this check. For credit card payments, the payment has been adjusted to reflect the tip. Toast does not prevent a `CLOSED` check from transitioning back to `OPEN` or `PAID`.

            Response only.
          enum:
            - OPEN
            - PAID
            - CLOSED
          type: string
        appliedDiscounts:
          description: "The discounts applied to this check. In a `POST` request, only one `appliedDiscount` is allowed per check."
          items:
            $ref: '#/components/schemas/AppliedDiscount'
          minItems: 0
          type: array
        voided:
          description: True if this check is voided. Response only.
          type: boolean
        voidDate:
          description: The date when this check was voided. Response only.
          format: date-time
          type: string
        voidBusinessDate:
          description: The business date (yyyyMMdd) on which this check was voided. Response only.
          type: integer
        paidDate:
          description: "The most recent date when this check received payment. If not specified when `POST`ing, it is set to the current system time."
          format: date-time
          type: string
        pickedUpDate:
          description: For internal use only.
          format: date-time
          type: string
        createdDevice:
          $ref: '#/components/schemas/Device'
        lastModifiedDevice:
          $ref: '#/components/schemas/Device'
        appliedPreauthInfo:
          $ref: '#/components/schemas/AppliedPreauthInfo'
        shift:
          $ref: '#/components/schemas/ExternalReference'
        driverShift:
          $ref: '#/components/schemas/ExternalReference'
        removedSelections:
          description: For internal use only.
          items:
            $ref: '#/components/schemas/RemovedSelection'
          type: array
      required:
        - selections
      type: object
      example: null
    AppliedLoyaltyInfo_allOf:
      properties:
        loyaltyIdentifier:
          description: "An identifier for the loyalty program account. For `POST` orders, this identifier is transmitted to the loyalty program service provider to associate the check with the loyalty account."
          type: string
        maskedLoyaltyIdentifier:
          description: |
            A representation of the identifier of the loyalty program
            account that can be displayed securely. For example:
            `************1234`. The Toast POS displays this string to
            restaurant employees and guests.

            You can optionally include this
            value when you `POST` an order. It is
            available in response data when you `GET` the order.

            If you do not provide a `maskedLoyaltyIdentifier` when you
            `POST` an order, this value is `null` in response data.

            The Toast POS app displays a masked representation of the
            `loyaltyIdentifier`. All characters except the last four
            are hidden.
          type: string
        vendor:
          description: The specific loyalty program service provider that supports the loyalty account.
          enum:
            - TOAST
            - PUNCHH
            - PUNCHH2
            - PAYTRONIX
            - APPFRONT
            - INTEGRATION
          type: string
        accrualFamilyGuid:
          description: |
            Response only. An internal Toast platform identifier for loyalty
            program transactions.

            This is not returned from the initial
            `POST` order request and is available at a later time.
          type: string
        accrualText:
          description: |
            Response only. A description of the loyalty program transaction
            to print on the customer's receipt. For example,
            "Earned 27 points."

            The maximum length of the description string
            is 255 characters.

            This is not returned from the initial
            `POST` order request and is available at a later time.
          type: string
      type: object
      example: null
    Selection_allOf:
      properties:
        item:
          $ref: '#/components/schemas/ConfigReference'
        itemGroup:
          $ref: '#/components/schemas/ConfigReference'
        optionGroup:
          $ref: '#/components/schemas/ConfigReference'
        preModifier:
          $ref: '#/components/schemas/ExternalReference'
        quantity:
          description: "Quantity ordered. For items sold by weight, a decimal number. For discrete items, a counting number."
          format: double
          type: number
        seatNumber:
          description: |
            Indicates which guest seat at a restaurant table ordered
            a menu item selection. Restaurant employees can choose the
            seat number when they add a menu item to a guest check.

            * A positive integer value indicates the seat number for
              the menu item.

            * `0` - Indicates that the menu item is shared by
              multiple guests.

            * `-1` - Indicates that the restaurant employee did not
              select a seat for the menu item.

            Response only.
          type: integer
        unitOfMeasure:
          description: |
            The unit of measure required for weighing the item.

            The default is `NONE`, which means that the item is not meant to be weighed.
          enum:
            - NONE
            - LB
            - OZ
            - KG
            - G
          type: string
        selectionType:
          description: |
            Specifies whether this selection is a special request or other off-menu sale.

            If `null` or `NONE`, describes a normal modifier or item selection.
          enum:
            - NONE
            - OPEN_ITEM
            - SPECIAL_REQUEST
            - PORTION
            - HOUSE_ACCOUNT_PAY_BALANCE
          type: string
        salesCategory:
          $ref: '#/components/schemas/ExternalReference'
        appliedDiscounts:
          description: The itemized discounts that are applied to this item. Response only.
          items:
            $ref: '#/components/schemas/AppliedDiscount'
          minItems: 0
          type: array
        deferred:
          description: "Whether this selection is a deferred revenue transaction, such as a gift card sale."
          type: boolean
        preDiscountPrice:
          description: Gross sale price for this selection. Excludes tax. Response only.
          format: double
          type: number
        price:
          description: "Net price for this selection. The final price of the item after considering discounts (including discounts at the check level), quantity adjustments, and modifier prices at the time the item was selected for purchase. Response only."
          format: double
          type: number
        tax:
          description: The total tax amount for this selection. Response only.
          format: double
          type: number
        voided:
          description: Set to `true` if this selection is voided. Response only.
          type: boolean
        voidDate:
          description: The date on which this selection was voided. Response only.
          format: date-time
          type: string
        voidBusinessDate:
          description: The business date (yyyyMMdd) on which this selection was voided. Response only.
          type: integer
        voidReason:
          $ref: '#/components/schemas/ExternalReference'
        refundDetails:
          $ref: '#/components/schemas/RefundDetails'
        displayName:
          description: |
            The display name of the selection.

            Can be used to set a special request value.

            Otherwise, it is generated from this selection's item property.
          type: string
        createdDate:
          description: "The date on which this selection was created. If not specified, defaults to the current time."
          format: date-time
          type: string
        modifiedDate:
          description: "The date on which this selection was last modified. If not specified, defaults to the current time."
          format: date-time
          type: string
        modifiers:
          description: A list of modifiers that apply to this selection.
          items:
            $ref: '#/components/schemas/Selection'
          type: array
        fulfillmentStatus:
          default: NEW
          description: |
            Indicates the stage of the preparation workflow that the
            menu item selection is in.

            The `fulfillmentStatus` of a
            menu item selection changes as restaurant employees move
            the item through the functions of the Toast POS, for
            example order entry and the kitchen display system (KDS).
            Response only.

            Valid values:

            * `NEW` - The menu item selection was added to a
              check but is not yet sent to the KDS for
              preparation.

            * `HOLD` - A restaurant employee paused the menu
              item selection so that it does not appear in the
              KDS for preparation.

            * `SENT` - The menu item selection was fired and
              appears in the KDS for preparation.

            * `READY` - Preparation is complete. The menu item
              selection is fulfilled and no longer appears in
              the KDS. If your restaurant does not use the Toast platform
              KDS, then order items do not reach the `READY`
              status.
            </ul>
          enum:
            - NEW
            - HOLD
            - SENT
            - READY
          type: string
        taxInclusion:
          description: |
            Indicates whether the menu item price includes one or more tax
            amounts. If the menu item is a modifier for another menu item
            selection, it always inherits the tax inclusion behavior of the menu
            item that it applies to.

            Valid values:
            * `INCLUDED` - The menu item price includes one or more tax amounts.
            * `NOT_INCLUDED` - The menu item price does not include any tax
              amounts.
            * `INHERITED` - The menu item is a modifier for another menu item
              selection in the check. The `taxInclusion` value of the parent menu
              item selection applies to the modifier. If a menu item selection
              *that is not a modifier* inherits tax inclusion behavior from a
              menu or menu group, the `taxInclusion` value is either
              `INCLUDED` or `NOT_INCLUDED`.
          enum:
            - INCLUDED
            - NOT_INCLUDED
            - INHERITED
          type: string
        appliedTaxes:
          description: An array of `AppliedTaxRate` objects that contain information about tax payments made for the selection. Response only.
          items:
            $ref: '#/components/schemas/AppliedTaxRate'
          type: array
        diningOption:
          $ref: '#/components/schemas/ExternalReference'
        openPriceAmount:
          description: |
            A non-negative currency amount that sets the price of a
            menu item that is configured to use the *Open Price*
            pricing strategy. If you do not supply an
            `openPriceAmount` value for an open price menu item, the
            orders API sets the price to 0.00.

            If a menu item is configured to use tax-inclusive
            pricing, the orders API calculates the base price and tax
            amount based on the open price that you specify. _The
            open-price amount includes both the base-price and
            inclusive tax amount._

            `POST` only. The `openPriceAmount` value is not
            present in orders API return data. It is used to
            populate `receiptLinePrice`.
          format: double
          type: number
        receiptLinePrice:
          description: "The price of the menu item selection before any quantity, taxes, \ndiscounts, and modifier option adjustments are applied.\n\nFor example, if the menu item selection is for two orders of fries, \n`receiptLinePrice` is the price of one order of fries. If a menu item selection \nis for three large drinks, receiptLinePrice is the price of one large drink.\n\nPopulated based on the menu configuration, or using the value provided in \n`externalPriceAmount` or `openPriceAmount`.\n"
          format: double
          type: number
        optionGroupPricingMode:
          description: Information about how the modifier group affects the pricing of its parent item.
          enum:
            - INCLUDED
            - FIXED_PRICE
            - ADJUSTS_PRICE
            - REPLACES_PRICE
            - LOCATION_SPECIFIC_PRICE
          type: string
        externalPriceAmount:
          description: |
            The menu item price that was calculated by the
            marketplace facilitator organization that created the
            order.

            `POST` only. The orders API does not include the
            `externalPriceAmount` value in return data. It is
            used to populate `receiptLinePrice`.

            **Note**: you can only include this information if your
            Toast API client is associated with a designated
            marketplace facilitator organization. Most Toast API
            clients do not create marketplace facilitator orders.
          format: double
          type: number
        toastGiftCard:
          $ref: '#/components/schemas/ToastReference'
        storedValueTransactionId:
          description: |
            For internal use only.
          format: int64
          type: number
      required:
        - item
        - quantity
      type: object
      example: null
    Payment_allOf:
      properties:
        paidDate:
          description: The date on which the payment was made.
          format: date-time
          type: string
        paidBusinessDate:
          description: The business date (yyyyMMdd) on which this payment was first applied. Response only.
          type: integer
        type:
          description: |
            The payment method.

            When `POST`ing, only `OTHER` and `CREDIT` payment types are supported. For cash payments, you create an external cash payment type in Other Payment Options.

            All other types are response only.

            Valid values:

            * `CASH` - The guest paid in cash.
            * `CREDIT` - The guest used a credit card.
            * `GIFTCARD` - The guest used a gift card.
            * `HOUSE_ACCOUNT` - The guest used funds from their house account.
            * `REWARDCARD` - The guest used the available balance on a rewards card.
            * `LEVELUP` - The guest used the LevelUp app.
            * `OTHER` - The payment type is a custom type configured by the restaurant.
            * `UNDETERMINED` - The payment type cannot be determined.
          enum:
            - CASH
            - CREDIT
            - GIFTCARD
            - HOUSE_ACCOUNT
            - REWARDCARD
            - LEVELUP
            - OTHER
            - UNDETERMINED
          type: string
        cardEntryMode:
          description: |
            Indicates how credit card data was obtained. Response only.

            Valid values:

            * `SWIPED` - The credit card was swiped through a card reader.
            * `KEYED` - The restaurant employee typed the card number into a device.
            * `ONLINE` - The credit card information was entered online.
            * `EMV_CHIP_SIGN` - The credit card was inserted into a chip reader.
            * `TOKENIZED` - The credit card number is tokenized, meaning that it is replaced by a series of randomly generated numbers. The authorizer is able to use the token to authorize the actual credit card.
            * `PRE_AUTHED` - The credit card was pre-authorized for an initial amount. An example of pre-authorization is swiping a credit card to start a bar tab. The final payment is authorized when the order is complete.
            * `SAVED_CARD` - The credit card information was retrieved from the guest's account.
            * `FUTURE_ORDER` - The credit card payment was included on a scheduled order.
            * `CONTACTLESS` - The guest used a contactless payment option to provide the credit card number.
            * `APPLE_PAY_CNP` - The guest used the Apple Pay app to make the payment.
            * `GOOGLE_PAY_CNP` - The guest used the Google Pay app to make the payment.
            * `INCREMENTAL_PRE_AUTHED` - An additional payment was added to a pre-authorized card. For example, a guest uses a credit card to open a bar tab. As they continue to order more drinks, the pre-authorized amount is updated. The final payment is authorized when the order is complete.
            * `PARTNER_ECOM_COF` - The restaurant has the credit card on file.
            * `CLICK_TO_PAY_CNP` - The guest used Click to Pay to make the payment.
          enum:
            - SWIPED
            - KEYED
            - ONLINE
            - EMV_CHIP_SIGN
            - TOKENIZED
            - PRE_AUTHED
            - SAVED_CARD
            - FUTURE_ORDER
            - CONTACTLESS
            - APPLE_PAY_CNP
            - GOOGLE_PAY_CNP
            - INCREMENTAL_PRE_AUTHED
            - PARTNER_ECOM_COF
            - CLICK_TO_PAY_CNP
          type: string
        amount:
          description: "The amount of this payment, excluding tips."
          format: double
          type: number
        tipAmount:
          description: The amount tipped on this payment.
          format: double
          type: number
        amountTendered:
          description: The amount tendered for this payment. The amount tendered does not include the tip.
          format: double
          type: number
        cardType:
          description: The type of credit card that was used. Response only.
          enum:
            - VISA
            - MASTERCARD
            - AMEX
            - DISCOVER
            - JCB
            - DINERS
            - CIT
            - MAESTRO
            - LASER
            - SOLO
            - INTERAC
            - UNKNOWN
          type: string
        last4Digits:
          description: The last 4 digits of the credit card that was used. Response only.
          type: string
        originalProcessingFee:
          description: The original processing fee for this payment. Populated after the payment is captured. Response only.
          format: double
          type: number
        server:
          $ref: '#/components/schemas/ExternalReference'
        referenceCode:
          description: For internal use only.
          type: string
        cashDrawer:
          $ref: '#/components/schemas/ExternalReference'
        refundStatus:
          description: |
            Indicates whether the payment was refunded. Response only.

            Valid values:
            * `NONE` - The payment was not refunded.
            * `PARTIAL` - The payment was partially refunded.
            * `FULL` - The payment was refunded in full.
          enum:
            - NONE
            - PARTIAL
            - FULL
          type: string
        refund:
          $ref: '#/components/schemas/Refund'
        paymentStatus:
          description: |
            The status of this payment when the type is `CREDIT`. Response only.

            Valid values:

            * `OPEN` - The payment has not been presented for processing.
            * `PROCESSING` - The payment is being processed.
            * `AUTHORIZED_AT_RISK` - This value is no longer used.
            * `AUTHORIZED` - The payment is approved but not yet captured. The card is valid and the funds are available.
            * `ERROR` - An error occurred during the payment processing.
            * `ERROR_NETWORK` - Unable to connect to the payment authorizer.
            * `DENIED` - The payment request was denied. For example, the provided credit card is over its limit.
            * `PROCESSING_VOID` - A void request for the payment is being processed.
            * `VOIDED_AT_RISK` - This value is no longer used.
            * `CANCELLED` - The payment is canceled.
            * `CAPTURE_IN_PROGRESS` - The payment is in the process of being captured.
            * `CAPTURED` - The payment is captured. When the payment is captured, the funds are transferred to the restaurant.
            * `VOIDED` - The payment is voided.
          enum:
            - OPEN
            - PROCESSING
            - AUTHORIZED_AT_RISK
            - AUTHORIZED
            - ERROR
            - ERROR_NETWORK
            - DENIED
            - PROCESSING_VOID
            - VOIDED_AT_RISK
            - CANCELLED
            - CAPTURE_IN_PROGRESS
            - CAPTURED
            - VOIDED
          type: string
        voidInfo:
          $ref: '#/components/schemas/VoidInformation'
        houseAccount:
          $ref: '#/components/schemas/ExternalReference'
        otherPayment:
          $ref: '#/components/schemas/ExternalReference'
        createdDevice:
          $ref: '#/components/schemas/Device'
        lastModifiedDevice:
          $ref: '#/components/schemas/Device'
        mcaRepaymentAmount:
          description: |
            The total currency amount withheld as repayment for a
            Toast Capital merchant cash advance (MCA). The MCA
            repayment amount is set at the time the payment is
            captured, which is typically hours after the actual
            restaurant guest payment.

            Until the `mcaRepaymentAmount`
            is set, this value is `null`.

            The `mcaRepaymentAmount`
            _might_ be updated when the payment is settled, which is
            typically one or more days after the actual guest
            payment. Response only.
          format: double
          type: number
        cardPaymentId:
          description: |
            **Note:** this value is in limited release. Your orders API
            integration might not include the `cardPaymentId` value.

            A unique identifier for the credit card used for a
            `CREDIT` type payment. The identifier string is generated
            by the Toast platform and _does not include any
            information related to or associated with the actual
            credit card account._ The identifier is unique within
            your restaurant management group.

            The value is `null` for the following payment types:

            * Payment types other than `CREDIT`
            * Credit card payments entered using EMV (chip cards)
            * Credit card payments entered by keying in card numbers

            Response only.
          type: string
        paymentCardToken:
          $ref: '#/components/schemas/ToastReference'
        giftCard:
          $ref: '#/components/schemas/ExternalReference'
        giftCardInfo:
          $ref: '#/components/schemas/GiftCardInfo'
        orderGuid:
          description: The Toast platform identifier for the order that contains the payment. Response only.
          type: string
        checkGuid:
          description: The Toast platform identifier for the check that contains the payment. Response only.
          type: string
        receiptToken:
          description: For internal use only.
          type: string
        cardHolderFirstName:
          description: For internal use only.
          type: string
        cardHolderLastName:
          description: For internal use only.
          type: string
        isProcessedOffline:
          description: |
            For internal use only.
          type: boolean
        processingService:
          description: For internal use only.
          type: string
        authorizedAmount:
          description: For internal use only.
          format: double
          type: number
        cardTenderType:
          description: For internal use only.
          type: string
        prepaidCardBalance:
          description: For internal use only.
          format: double
          type: number
        proRatedDiscountAmount:
          description: For internal use only.
          format: double
          type: number
        proRatedTaxAmount:
          description: For internal use only.
          format: double
          type: number
        proRatedTotalServiceChargeAmount:
          description: For internal use only.
          format: double
          type: number
        shift:
          $ref: '#/components/schemas/ExternalReference'
        serverShift:
          $ref: '#/components/schemas/ExternalReference'
        orderOwnerGuid:
          description: For internal use only.
          type: string
      required:
        - amount
        - tipAmount
        - type
      type: object
      example: null
    GiftCardInfo_allOf:
      properties:
        storedValueBalance:
          description: Reserved for future use.
          format: double
          type: number
        rewardsBalance:
          description: Reserved for future use.
          format: double
          type: number
        authRequestId:
          description: Reserved for future use.
          type: string
        authorizationState:
          description: Reserved for future use.
          enum:
            - VALIDATED
            - NONE
            - PAID
            - REVERSED
            - DENIED
            - ERROR
            - ADJUSTING
          type: string
        cardNumberIdentifier:
          description: Reserved for future use.
          type: string
      type: object
      example: null
    Customer_allOf:
      properties:
        firstName:
          description: |
            The first name, or given name, of the guest.
          type: string
        lastName:
          description: |
            The last name, or surname, of the guest.
          type: string
        phone:
          description: |
            The telephone number of the guest.
          type: string
        phoneToken:
          description: |
            For internal use only.
          type: string
        email:
          description: |
            The email address corresponding to the guest who placed the order.

            The email address is the key that identifies a unique restaurant guest. All distinct guests should have distinct email addresses.
          type: string
        emailToken:
          description: |
            For internal use only.
          type: string
      required:
        - email
        - firstName
        - lastName
        - phone
      type: object
      example: null
    AppliedServiceCharge_allOf:
      properties:
        chargeAmount:
          description: The final applied amount excluding tax. Required if `chargeType` is `OPEN`.
          format: double
          type: number
        serviceCharge:
          $ref: '#/components/schemas/ExternalReference'
        chargeType:
          description: |
            The type of service charge. Response only.

            Valid values:

            * `FIXED` - The service charge is for a specific currency amount.

            * `PERCENT` - The service charge is for a percentage of the check amount.

            * `OPEN` - The service charge is not configured with an amount. The amount is specified by the restaurant employee.
          enum:
            - FIXED
            - PERCENT
            - OPEN
          type: string
        name:
          description: The configured human readable label for the service charge. Response only.
          type: string
        delivery:
          description: Whether this service charge is a delivery charge. Response only.
          type: boolean
        takeout:
          description: Whether this service charge is a takeout charge. Response only.
          type: boolean
        dineIn:
          description: Whether this service charge is a dine-in charge. Response only.
          type: boolean
        gratuity:
          description: Whether this service charge is a gratuity. Can be used to derive required tip amount on the check. Response only.
          type: boolean
        taxable:
          description: Whether this service charge is taxable. Response only.
          type: boolean
        appliedTaxes:
          description: Taxes applied to the service charge.
          items:
            $ref: '#/components/schemas/AppliedTaxRate'
          type: array
        tags:
          description: For internal use only.
          items:
            type: string
          type: array
        serviceChargeCalculation:
          description: |
            Defines whether a `PERCENT` service charge is applied before (`PRE_DISCOUNT`) or after (`POST_DISCOUNT`) discounts.

            This field is `null` for `FIXED` and `OPEN` service charges.
          enum:
            - PRE_DISCOUNT
            - POST_DISCOUNT
          type: string
        refundDetails:
          $ref: '#/components/schemas/RefundDetails'
      required:
        - serviceCharge
      type: object
      example: null
    AppliedTaxRate_allOf:
      properties:
        entityType:
          description: The type of object this is.
          type: string
        taxRate:
          $ref: '#/components/schemas/ToastReference'
        name:
          description: The name of the tax rate.
          type: string
        rate:
          description: "The tax rate, which can be a fixed amount, a percentage, or null."
          format: double
          type: number
        taxAmount:
          description: The tax amount that was actually applied.
          format: double
          type: number
        type:
          description: |
            The type of the tax rate. Default is `PERCENT`.

            The value `EXTERNAL` indicates that the tax is for a marketplace
            facilitator order, and that the marketplace facilitator
            organization calculated the tax amount.
          enum:
            - PERCENT
            - FIXED
            - NONE
            - TABLE
            - EXTERNAL
          type: string
        facilitatorCollectAndRemitTax:
          description: |
            Indicates whether the marketplace facilitator that
            received a guest order remitted the tax amount on behalf
            of the Toast platform restaurant.

            You can use this information to identify tax amounts that
            have already been paid by an ordering service provider
            and do not need to be paid again.

            * `true` - The marketplace facilitator paid the tax
            amount on behalf of the Toast platform restaurant
            location.

            * `false` - The marketplace facilitator has not paid the
            tax amount. The Toast platform restaurant location may be
            required to pay the tax amount.

            **Note**: Toast API response data is not guidance or
            advice for tax compliance.
          type: boolean
      type: object
      example: null
    AppliedDiscount_allOf:
      properties:
        name:
          description: The name of the applied discount. Response only.
          type: string
        discountAmount:
          description: The discount amount. This amount is subtracted from the check or item.
          format: double
          type: number
        nonTaxDiscountAmount:
          description: |
            The amount that a discount reduces a menu item price,
            excluding any discount amount applied to taxes.

            In most cases, a discount only applies to the menu item price, and
            the `nonTaxDiscountAmount` is the same as the `discountAmount`.

            If you apply a discount to a menu item that includes tax in
            its price, the `nonTaxDiscountAmount` is less than `discountAmount`.
          format: double
          type: number
        discount:
          $ref: '#/components/schemas/ToastReference'
        triggers:
          description: Optional items that triggered this discount. Response only.
          items:
            $ref: '#/components/schemas/AppliedDiscountTrigger'
          type: array
        approver:
          $ref: '#/components/schemas/ExternalReference'
        processingState:
          description: |
            Applies to loyalty program discounts only. Loyalty
            program reward discounts are validated and then applied,
            or redeemed, by the third-party loyalty program service
            provider depending on the state of the Toast platform order.

            This value indicates the state of the discount in that
            validation and application process. Response only.

            Valid values:
            <ul>
              <li><code>PENDING_APPLIED</code> - The loyalty program
              service provider confirmed that the reward discount
              is valid for the order and customer. The reward is not yet
              redeemed, or applied to the customer's loyalty
              account.</li>
              <li><code>APPLIED</code> - The reward discount is
              redeemed. The reward is no longer available from the
              customer's loyalty program account.</li>
              <li><code>PENDING_VOID</code> - The reward discount was
              removed from the Toast platform order. The reward is not
              available from the customer's loyalty program account
              until the loyalty program service provider processes
              the void operation.</li>
              <li><code>VOID</code> - The reward discount was removed
              from the Toast platform order and the reward is available from
              the customer's loyalty program account again.</li>
            </ul>
          enum:
            - PENDING_APPLIED
            - APPLIED
            - PENDING_VOID
            - VOID
          type: string
        loyaltyDetails:
          $ref: '#/components/schemas/LoyaltyDetails'
        comboItems:
          description: A list of menu item selections that this combo discount applies to. Empty for non-combo discounts. Response only.
          items:
            $ref: '#/components/schemas/ExternalReference'
          type: array
        appliedPromoCode:
          description: |
            The promo code that was applied for this discount.

            For a POSTed order, the Toast platform cannot validate the promo code.
          type: string
        discountType:
          description: |
            The behavior of this discount.

            Valid values:
            * `BOGO` - Buy One, Get One. The guest receives a discount based on purchasing a specific item or items.
            * `PERCENT` - The guest receives a specific percentage off of the price.
            * `FIXED` - The guest receives a fixed currency amount off of the price.
            * `OPEN_PERCENT` - The guest receives a percentage off of the price. The percentage is specified when the order is placed.
            * `OPEN_FIXED` - The guest receives a currency amount off of the price. The amount is specified when the order is placed.
            * `FIXED_TOTAL` - The guest pays a specified discounted price when they purchase specific items. Also referred to as a combo discount.
          enum:
            - BOGO
            - PERCENT
            - FIXED
            - OPEN_PERCENT
            - OPEN_FIXED
            - FIXED_TOTAL
          type: string
        discountPercent:
          description: "The percent value (0-100) of the applied discount when the `discountType` is `PERCENT` or `OPEN_PERCENT`. For other discount types, this value is `null`."
          format: double
          type: number
      type: object
      example: null
    ConfigReference_allOf:
      properties:
        multiLocationId:
          description: |
            A consistent identifier for Toast platform entities, such
            as menu items, that applies to all versions of a shared
            entity at all locations in a restaurant group.

            For example, you can use the `multiLocationId` value to
            identify menu entities that are versions of a shared menu
            entity. For more information about the menus API `multilocationId` value, see
            [the _Toast Developer Guide_](https://doc.toasttab.com/doc/devguide/apiUnderstandingGuidsEntityIdentifiersAndMultilocationIds_V2.html#apiMultilocationIdValues_V2).
          type: string
        externalId:
          description: |
            An external identifier that is prefixed by a naming
            authority. Deprecated for use in `ConfigReference`.
          type: string
      type: object
      example: null
    ExternalReference_allOf:
      properties:
        externalId:
          description: External identifier string that is prefixed by the naming authority. You can use the orders API to set an `externalId` for an order and then GET the order with that `externalId`.
          type: string
      type: object
      example: null
    CurbsidePickupInfo_allOf:
      properties:
        transportColor:
          description: |
            The color of the guest's vehicle if they will arrive at the restaurant in a vehicle to pick up their order.
          maxLength: 20
          type: string
        transportDescription:
          description: |
            Information about how the guest will arrive at the restaurant to pick up their order.

            For example, the make and model of the vehicle the guest will arrive in.
          maxLength: 100
          type: string
        notes:
          description: |
            Extra notes.
          maxLength: 100
          type: string
      type: object
      example: null
    DeliveryServiceInfo_allOf:
      properties:
        providerId:
          description: |
            Reserved for future use.
          maxLength: 255
          type: string
        providerName:
          description: |
            Reserved for future use.
          maxLength: 36
          type: string
        driverName:
          description: |
            Reserved for future use.
          maxLength: 255
          type: string
        driverPhoneNumber:
          description: |
            Reserved for future use.
          maxLength: 30
          type: string
        providerInfo:
          description: |
            Reserved for future use.
          format: byte
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          type: string
      type: object
      example: null
    RemovedSelection_allOf:
      properties:
        price:
          description: For internal use only.
          format: double
          type: number
        quantity:
          description: For internal use only.
          format: double
          type: number
      type: object
      example: null
x-original-swagger-version: "2.0"
