openapi: 3.0.1
info:
  contact:
    name: Toast developer support
  description: "Toast labor API is a set of REST web services that you can use to \nmanage the employees, jobs, and shifts for your restaurant. The \nlabor API is intended for software engineers, managers, and \ntechnical staff who are responsible for integrating third-party \nsystems with the Toast platform.\n"
  title: Toast Labor API
  version: 1.9.0
servers:
  - url: https://ws-api.toasttab.com/labor/v1
  - url: https://ws-sandbox-api.eng.toasttab.com/labor/v1
tags:
  - name: Employees
  - name: Jobs
  - name: Shifts
  - name: Time entries
paths:
  /employees:
    get:
      description: "Returns an array of `Employee` objects containing information \nabout restaurant employees.\n"
      operationId: employeesGet
      parameters:
        - description: "The Toast platform GUID of the restaurant that is the \ncontext for this operation.\n"
          in: header
          name: Toast-Restaurant-External-ID
          required: true
          schema:
            format: string
            type: string
        - description: "An optional identifier that filters return values for a \nspecific employee. The identifier can be a Toast platform \nGUID or an external identifier. If present, the `employees` \nresource will only return the employees you specify. You \ncan include multiple `employeeIds` query parameters \n(maximum 100). If not present, the resource returns each \nemployee for the restaurant.\n"
          in: query
          name: employeeIds
          schema:
            format: string
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Employee'
                title: Response
                type: array
          description: |
            JSON objects for all employees in the restaurant
        "500":
          content: {}
          description: "An unexpected internal error occurred. There is a \n`requestId` attached to this error that can be referenced \nby Toast support.\n"
      summary: Get employees
      tags:
        - Employees
    post:
      description: |
        Creates a restaurant employee record.
      operationId: employeesPost
      parameters:
        - description: "The Toast platform GUID of the restaurant that is the \ncontext for this operation.\n"
          in: header
          name: Toast-Restaurant-External-ID
          required: true
          schema:
            format: string
            type: string
        - description: "The Internet Assigned Numbers Authority (IANA) media type \nof the message body data. The value must be \n`application/json`.\n"
          in: header
          name: Content-Type
          required: true
          schema:
            format: string
            type: string
      requestBody:
        content:
          application/json:
            schema:
              example: "{entityType=RestaurantUser, email=email, firstName=first name, chosenName=optional chosen name, lastName=last name, externalId=optional external ID, externalEmployeeId=optional external employee ID, jobReferences\"=[{guid=f290a951-2042-4f3d-b861-d89e9e583876, entityType=RestaurantJob}], wageOverrides=[{jobReference={guid=f290a951-2042-4f3d-b861-d89e9e583876, entityType=RestaurantJob}, wage=10}]}"
              type: string
        description: "An `Employee` object containing information about the \nemployee, including the employee's name and email address.\n"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
          description: Returns the created employee.
        "400":
          content: {}
          description: "The request contains data that is not supported by the \ncurrent version of the API as described.\n"
        "415":
          content: {}
          description: "The request did not have \"application/json\" in the \nContent-Type header.\n"
        "500":
          content: {}
          description: "An unexpected internal error occurred. There is a requestId \nattached to this error that can be referenced by Toast \nsupport.\n"
      summary: Add an employee
      tags:
        - Employees
      x-codegen-request-body-name: body
  /employees/{employeeId}:
    delete:
      description: "Deletes a restaurant employee record by marking the record as \ndeleted. A deleted employee cannot log in at the restaurant or \nopen new time entries.\n\nIf you `GET` an employee record that has been deleted, its \n`deleted` value is `true` and its `deletedDate` value contains \nthe date and time the record was deleted. If you `GET` all \nemployees for a restaurant, the GUIDs for deleted employees are \nnot included in the return data.\n\nIf you delete an employee that has already been deleted then \nthe result is successful (200) and no change is made.\n\nThe deleted record appears in the list of deleted employees for \nthe restaurant in the Toast administration back-end. From the \nlist of deleted employees, you can enable a deleted record so \nthat the employee can use it again. You cannot enable a deleted \nemployee using the labor API. Information about deleted \nemployees remains available in reports.\n\nYou cannot delete employees who have open time entries (time \nentries that do not have an out date value).\n"
      operationId: employeesEmployeeIdDelete
      parameters:
        - description: "The Toast platform GUID of the restaurant that is the \ncontext for this operation.\n"
          in: header
          name: Toast-Restaurant-External-ID
          required: true
          schema:
            format: string
            type: string
        - description: "The Toast platform GUID or external identifier for the \nemployee to be deleted.\n"
          in: path
          name: employeeId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
          description: "The employee has been deleted. Returns an `Employee` object \ncontaining information about the deleted restaurant \nemployee.\n"
        "400":
          content: {}
          description: |
            The GUID or external identifier was malformed.
        "404":
          content: {}
          description: |
            The GUID or external identifier does not match any
            employees at the current restaurant.
        "500":
          content: {}
          description: "An unexpected internal error occurred. There is a \n`requestId` attached to this error that can be referenced \nby Toast support.\n"
      summary: Delete an employee
      tags:
        - Employees
    get:
      description: "Returns an `Employee` object containing information about one \nrestaurant employee.\n"
      operationId: employeesEmployeeIdGet
      parameters:
        - description: "The Toast platform GUID of the restaurant that is the \ncontext for this operation.\n"
          in: header
          name: Toast-Restaurant-External-ID
          required: true
          schema:
            format: string
            type: string
        - description: "The Toast platform GUID or external identifier for the \nemployee to be returned.\n"
          in: path
          name: employeeId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
          description: |
            Returns the employee information.
        "400":
          content: {}
          description: |
            The GUID or external identifier was malformed.
        "404":
          content: {}
          description: "The GUID or external identifier does not match any \nemployees at the current restaurant.\n"
        "500":
          content: {}
          description: "An unexpected internal error occurred. There is a \n`requestId` attached to this error that can be referenced \nby Toast support.\n"
      summary: Get information about one employee
      tags:
        - Employees
    patch:
      description: "Updates the first name, chosen name, last name, external employee ID, and/or \npasscode of a restaurant employee. The `PATCH` operation cannot \nupdate any other employee information.\n"
      operationId: employeesEmployeeIdPatch
      parameters:
        - description: "The Toast platform GUID of the restaurant that is the \ncontext for this operation.\n"
          in: header
          name: Toast-Restaurant-External-ID
          required: true
          schema:
            format: string
            type: string
        - description: "The Internet Assigned Numbers Authority (IANA) media type \nof the message body data. The value must be \n`application/json`.\n"
          in: header
          name: Content-Type
          required: true
          schema:
            format: string
            type: string
        - description: "The Toast platform GUID or external identifier for the \nemployee to be returned.\n"
          in: path
          name: employeeId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              example: "{firstName=Mynewfirstname, chosenName=Mynewchosenname, lastName=Mynewlastname, externalEmployeeId=1234567890, passcode=1234, currentPasscode=1111}"
              type: string
        description: "A JSON object containing the employee information that you \nare updating. You can update an employee's:\n\n* `firstName` - First name.\n\n* `chosenName` - Chosen name.\n\n* `lastName` - Last name.\n\n* `externalEmployeeId` - External employee identifier.\n\n* `passcode` - The passcode for access to Toast POS devices.\n\nAll values are optional. You must include at least one \nvalue. Each value that you include must contain information \n(not null). If you include the `passcode` value to update \nan employee's passcode you must include the employee's \ncurrent passcode in the `currentPasscode` value.\n"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
          description: |
            Returns the updated Toast platform employee record.
        "400":
          content: {}
          description: "The Toast platform GUID or external identifier was \nmalformed, or the body of the request was malformed.\n"
        "404":
          content: {}
          description: "The Toast platform GUID or external identifier does not \nmatch any employees at the current restaurant.\n"
        "500":
          content: {}
          description: "An unexpected internal error occurred. There is a \n`requestId` attached to this error that can be referenced \nby Toast support.\n"
      summary: Update employee information
      tags:
        - Employees
      x-codegen-request-body-name: body
  /employees/{employeeId}/externalId:
    post:
      description: "Adds an external identifier for an existing employee. Include \nthe string value of the new external identifier in the message \nbody.\n\nYou cannot change an existing external identifier with another \n`POST` request; use `PUT` instead. The Toast platform uses this \nexternal identifier as one of the unique, persistent \nidentifiers for an employee record.\n"
      operationId: employeesEmployeeIdExternalIdPost
      parameters:
        - description: |
            The Toast platform GUID of the employee record.
          in: path
          name: employeeId
          required: true
          schema:
            type: string
        - description: "The Toast platform GUID of the restaurant that is the \ncontext for this operation.\n"
          in: header
          name: Toast-Restaurant-External-ID
          required: true
          schema:
            format: string
            type: string
        - description: "The Internet Assigned Numbers Authority (IANA) media type \nof the message body data. The value must be \n`application/json`.\n"
          in: header
          name: Content-Type
          required: true
          schema:
            format: string
            type: string
      requestBody:
        content:
          application/json:
            schema:
              example: MyToastNamingAuthority:9876543210
              type: string
        description: "The JSON string value of the `externalId` for the employee \nrecord. Wrap the value in double quotation marks to make it \nvalid JSON syntax.\n"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
          description: |
            Returns the updated employee record.
      summary: Add an external identifier
      tags:
        - Employees
      x-codegen-request-body-name: body
    put:
      description: "Adds or replaces the external identifier for an\nexisting employee. Include the string value of the new external\nidentifier in the message body.\n\nThe Toast platform uses this external identifier as one of the \nunique, persistent identifiers for an employee record. \n_Changing the external identifier for an existing employee \nmight affect reporting and other Toast platform functions that \nselect employees using the `externalId` value._\n"
      operationId: employeesEmployeeIdExternalIdPut
      parameters:
        - description: |
            The Toast platform GUID of the employee record.
          in: path
          name: employeeId
          required: true
          schema:
            type: string
        - description: "The Toast platform GUID of the restaurant that is the \ncontext for this operation.\n"
          in: header
          name: Toast-Restaurant-External-ID
          required: true
          schema:
            format: string
            type: string
        - description: "The Internet Assigned Numbers Authority (IANA) media type \nof the message body data. The value must be \n`application/json`.\n"
          in: header
          name: Content-Type
          required: true
          schema:
            format: string
            type: string
      requestBody:
        content:
          application/json:
            schema:
              example: MyToastNamingAuthority:9876543210
              type: string
        description: "The JSON string value of the `externalId` for the employee \nrecord. Wrap the value in double quotation marks to make it \nvalid JSON syntax.\n"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
          description: |
            Returns the updated employee record.
      summary: Add or replace an external identifier
      tags:
        - Employees
      x-codegen-request-body-name: body
  /employees/{employeeId}/jobs:
    put:
      description: "Replaces the list of jobs for an employee. Include a JSON  \narray of job identifiers in the message body.\n\nIf a job is defined at the restaurant group or subgroup level, \nthis operation adds or removes that job for the the employee at \n_all restaurant locations_ in the group or subgroup.\n"
      operationId: employeesEmployeeIdJobsPut
      parameters:
        - description: |
            The Toast platform GUID of the employee record.
          in: path
          name: employeeId
          required: true
          schema:
            type: string
        - description: "The Toast platform GUID of the restaurant that is the \ncontext for this operation.\n"
          in: header
          name: Toast-Restaurant-External-ID
          required: true
          schema:
            format: string
            type: string
        - description: "The Internet Assigned Numbers Authority (IANA) media type \nof the message body data. The value must be \n`application/json`.\n"
          in: header
          name: Content-Type
          required: true
          schema:
            format: string
            type: string
      requestBody:
        content:
          application/json:
            schema:
              example: "[{guid=dd8cea7a-add5-4508-b8fe-ffd0b584e4da}, {externalId=MyToastNamingAuthority:9876543210}]"
              type: string
        description: "An array of JSON objects containing identifiers for jobs. \nThe identifiers can be either Toast platform GUIDs or \nexternal identifiers.\n"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
          description: |
            Returns the updated employee record.
      summary: Replace a jobs list
      tags:
        - Employees
      x-codegen-request-body-name: body
  /employees/{employeeId}/wageOverrides:
    put:
      description: "Replaces the list of wage overrides for the jobs that are \nassigned to an employee. Include a JSON  array of \n`JobWageOverride` objects in the message body. Include the new \nwage for the employee in the `wage` value. Specify the wage in \nU.S. dollars.\n\nYou must include all existing wage overrides in the message \nbody. Any wage overrides that are not present in the array are \nremoved from the employee record.\n"
      operationId: employeesEmployeeIdWageOverridesPut
      parameters:
        - description: |
            The Toast platform GUID of the employee record.
          in: path
          name: employeeId
          required: true
          schema:
            type: string
        - description: "The Toast platform GUID of the restaurant that is the \ncontext for this operation.\n"
          in: header
          name: Toast-Restaurant-External-ID
          required: true
          schema:
            format: string
            type: string
        - description: "The Internet Assigned Numbers Authority (IANA) media type \nof the message body data. The value must be \n`application/json`.\n"
          in: header
          name: Content-Type
          required: true
          schema:
            format: string
            type: string
      requestBody:
        content:
          application/json:
            schema:
              example: "[{jobReference={guid=8d3bba92-10e4-4345-9ae6-ed94c09dc332}, wage=15.75}]"
              type: string
        description: |
          An array of JSON `JobWageOverride` objects.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
          description: "The wage overrides for the employee are replaced. Returns \nthe updated employee record.\n"
      summary: Replace wage overrides
      tags:
        - Employees
      x-codegen-request-body-name: body
  /shifts:
    get:
      description: "Returns an array of `Shift` objects that contain information \nabout schedule shifts for restaurant employees.\n"
      operationId: shiftsGet
      parameters:
        - description: "The Toast platform GUID of the restaurant that is the \ncontext for this operation.\n"
          in: header
          name: Toast-Restaurant-External-ID
          required: true
          schema:
            format: string
            type: string
        - description: |
            An optional identifier that filters return values for a
            specific shift. The identifier can be a Toast platform GUID
            or an external identifier. If present, the shifts
            resource will only return the shifts you specify. You
            can include multiple `shiftIds` query parameters (maximum
            100).
          in: query
          name: shiftIds
          schema:
            format: string
            type: string
        - description: "Optional start date and time of time period to match \nshifts. A shift matches the time period if the shift \n`inDate` is after (inclusive) the specified `startDate` and \nthe shift `outDate` is before the `endDate` (exclusive). \nThese parameters are required if the `shiftIds` parameter \nis not defined. The specified period cannot be longer than \none month.\n"
          in: query
          name: startDate
          schema:
            format: ISO-8601
            type: string
        - description: "Optional end date and time of time period to match shifts. \nA shift matches the time period if the shift `inDate` is \nafter (inclusive) the specified `startDate` and the shift \n`outDate` is before the `endDate` (exclusive). These \nparameters are required if the `shiftIds` parameter is not \ndefined. The specified period cannot be longer than one \nmonth.\n"
          in: query
          name: endDate
          schema:
            format: ISO-8601
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Shift'
                title: Response
                type: array
          description: |
            Returns the specified shifts in an unordered list.
        "500":
          content: {}
          description: "An unexpected internal error occurred. There is a \n`requestId` attached to this error that can be referenced \nby Toast support.\n"
      summary: Get shifts
      tags:
        - Shifts
    post:
      description: |
        Creates a schedule shift for a restaurant employee.
      operationId: shiftsPost
      parameters:
        - description: "The Toast platform GUID of the restaurant that is the \ncontext for this operation.\n"
          in: header
          name: Toast-Restaurant-External-ID
          required: true
          schema:
            format: string
            type: string
        - description: "The Internet Assigned Numbers Authority (IANA) media type \nof the message body data. The value must be \n`application/json`.\n"
          in: header
          name: Content-Type
          required: true
          schema:
            format: string
            type: string
      requestBody:
        content:
          application/json:
            schema:
              example: "{externalId=MyToastNamingAuthority:1234, entityType=Shift, jobReference={guid=678758d1-6aa8-494c-be55-0614f761d160, externalId=, entityType=RestaurantJob}, employeeReference={guid=7030407f-761c-4d92-86d9-4e84bc700d0f, externalId=, entityType=RestaurantUser}, inDate=2015-10-10T06:00:00.000+0000, outDate=2015-10-10T12:00:00.000+0000}"
              type: string
        description: "A `Shift` object containing information about the shift, \nincluding the job identifier, the employee identifier, and \nthe start and end times.\n"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shift'
          description: |
            Creates a shift record and returns information about it.
        "400":
          content: {}
          description: "The request contains data that is not supported by the \ncurrent version of the API as described.\n"
        "415":
          content: {}
          description: "The request did not have \"application/json\" in the \n`Content-Type` header.\n"
        "500":
          content: {}
          description: "An unexpected internal error occurred. There is a \n`requestId` attached to this error that can be referenced \nby Toast support.\n"
      summary: Create a shift
      tags:
        - Shifts
      x-codegen-request-body-name: body
  /shifts/{shiftId}:
    delete:
      description: "Marks an existing schedule shift record for a restaurant \nemployee as deleted. If the shift record was already deleted, \nthen the operation will succeed (HTTP 200 response code) and no \nchange will be made.\n"
      operationId: shiftsShiftIdDelete
      parameters:
        - description: "The Toast platform GUID of the restaurant that is the \ncontext for this operation.\n"
          in: header
          name: Toast-Restaurant-External-ID
          required: true
          schema:
            format: string
            type: string
        - description: "The shift identifier, either the Toast platform GUID or an \nexternal identifier.\n"
          in: path
          name: shiftId
          required: true
          schema:
            format: string
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shift'
          description: "Returns the specified shift, with the deleted flag set to \n`true`.\n"
        "400":
          content: {}
          description: "The Toast platform GUID or external identifier was \nmalformed.\n"
        "404":
          content: {}
          description: "The Toast platform GUID or external identifier does not \nmatch any shifts at the current restaurant.\n"
        "500":
          content: {}
          description: "An unexpected internal error occurred. There is a \n`requestId` attached to this error that can be referenced \nby Toast support.\n"
      summary: Delete a shift
      tags:
        - Shifts
    get:
      description: "Returns a `Shift` object containing of information about one \nschedule shift for a restaurant employee.\n"
      operationId: shiftsShiftIdGet
      parameters:
        - description: "The Toast platform GUID of the restaurant that is the \ncontext for this operation.\n"
          in: header
          name: Toast-Restaurant-External-ID
          required: true
          schema:
            format: string
            type: string
        - description: "The Toast platform GUID or an external identifier for the \nshift.\n"
          in: path
          name: shiftId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shift'
          description: |
            Returns the specified shifts in an unordered list.
        "400":
          content: {}
          description: |
            The GUID or external identifier was malformed.
        "404":
          content: {}
          description: |
            The GUID or external identifier does not match any shifts
            at the current restaurant.
        "500":
          content: {}
          description: "An unexpected internal error occurred. There is a \n`requestId` attached to this error that can be referenced \nby Toast support.\n"
      summary: Get a shift
      tags:
        - Shifts
    put:
      description: "Updates an existing schedule shift record for a restaurant \nemployee. A `PUT` request completely replaces the information \nin the existing record.\n"
      operationId: shiftsShiftIdPut
      parameters:
        - description: "The Toast platform GUID of the restaurant that is the \ncontext for this operation.\n"
          in: header
          name: Toast-Restaurant-External-ID
          required: true
          schema:
            format: string
            type: string
        - description: "The shift identifier, either the Toast platform GUID or an \nexternal identifier.\n"
          in: path
          name: shiftId
          required: true
          schema:
            format: string
            type: string
      requestBody:
        content:
          application/json:
            schema:
              example: "{entityType=Shift, jobReference={guid=678758d1-6aa8-494c-be55-0614f761d160, externalId=, entityType=RestaurantJob}, employeeReference={guid=7030407f-761c-4d92-86d9-4e84bc700d0f, externalId=, entityType=RestaurantUser}, inDate=2015-10-10T06:00:00.000+0000, outDate=2015-10-10T12:00:00.000+0000}"
              type: string
        description: "The shift information. The `externalId` identifier is not \nallowed for`PUT` requests.\n"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shift'
          description: |
            Returns the updated `Shift`.
        "400":
          content: {}
          description: "The request contains data that is not supported by the \ncurrent version of the API as described.\n"
        "404":
          content: {}
          description: |
            The GUID or external identifier does not match any shifts
            at the current restaurant.
        "415":
          content: {}
          description: "The request did not have `application/json` in the \n`Content-Type` header.\n"
        "500":
          content: {}
          description: "An unexpected internal error occurred. There is a \n`requestId` attached to this error that can be referenced \nby Toast support.\n"
      summary: Update a shift
      tags:
        - Shifts
      x-codegen-request-body-name: body
  /jobs:
    get:
      description: "Returns an array of `Job` objects containing information about \nthe employee jobs configured at a restaurant.\n"
      operationId: jobsGet
      parameters:
        - description: "The Toast platform GUID of the restaurant that is the \ncontext for this operation.\n"
          in: header
          name: Toast-Restaurant-External-ID
          required: true
          schema:
            format: string
            type: string
        - description: "An optional array of one or more job identifiers, either \nthe Toast platform GUID or an external identifier assigned \nby the client. 100 max. If not provided, all jobs known to \nthe Toast platform for this restaurant will be returned.\n"
          explode: false
          in: query
          name: jobIds
          schema:
            items:
              type: string
            type: array
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Job'
                title: Response
                type: array
          description: |
            Returns the specified jobs.
        "500":
          content: {}
          description: "An unexpected internal error occurred. There is a \n`requestId` attached to this error that can be referenced \nby Toast support.\n"
      summary: Get jobs
      tags:
        - Jobs
  /jobs/{jobId}:
    get:
      description: "Returns a `Job` object containing information about one \nemployee job at a restaurant.\n"
      operationId: jobsJobIdGet
      parameters:
        - description: "The Toast platform GUID of the restaurant that is the \ncontext for this operation.\n"
          in: header
          name: Toast-Restaurant-External-ID
          required: true
          schema:
            format: string
            type: string
        - description: "The Toast platform GUID or an external identifier for the \njob.\n"
          in: path
          name: jobId
          required: true
          schema:
            format: string
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
          description: |
            Returns the specified job.
        "400":
          content: {}
          description: "The Toast platform GUID or external identifier was \nmalformed.\n"
        "500":
          content: {}
          description: "An unexpected internal error occurred. There is a \n`requestId` attached to this error that can be referenced \nby Toast support.\n"
      summary: Get one job
      tags:
        - Jobs
  /jobs/{jobId}/externalId:
    post:
      description: "Adds an external identifier for an existing job. Include the \nstring value of the new external identifier in the message \nbody.\n\nYou cannot change an existing external identifier with another \n`POST` request. The Toast platform uses this external \nidentifier as one of the unique, persistent identifiers for a \njob record.\n"
      operationId: jobsJobIdExternalIdPost
      parameters:
        - description: "The Toast platform GUID or external identifier of the job \nrecord.\n"
          in: path
          name: jobId
          required: true
          schema:
            type: string
        - description: "The Toast platform GUID of the restaurant that is the \ncontext for this operation.\n"
          in: header
          name: Toast-Restaurant-External-ID
          required: true
          schema:
            format: string
            type: string
        - description: "The Internet Assigned Numbers Authority (IANA) media type \nof the message body data. The value must be \n`application/json`.\n"
          in: header
          name: Content-Type
          required: true
          schema:
            format: string
            type: string
      requestBody:
        content:
          application/json:
            schema:
              example: MyToastNamingAuthority:9876543210
              type: string
        description: "The JSON string value of the `externalId` for the job \nrecord. Wrap the value in double quotation marks to make it \nvalid JSON syntax.\n"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
          description: |
            Returns the updated job record.
      summary: Add an external identifier
      tags:
        - Jobs
      x-codegen-request-body-name: body
    put:
      description: "Adds or replaces the external identifier for an existing job. \nInclude the string value of the new external identifier in the \nmessage body.\n\nThe Toast platform uses this external identifier as one of the \nunique, persistent identifiers for a job record. _Changing the \nexternal identifier for an existing job might affect reporting \nand other Toast platform functions that select jobs using the \n`externalId` value._\n"
      operationId: jobsJobIdExternalIdPut
      parameters:
        - description: "The Toast platform GUID or external identifier of the job \nrecord.\n"
          in: path
          name: jobId
          required: true
          schema:
            type: string
        - description: "The Toast platform GUID of the restaurant that is the \ncontext for this operation.\n"
          in: header
          name: Toast-Restaurant-External-ID
          required: true
          schema:
            format: string
            type: string
        - description: "The Internet Assigned Numbers Authority (IANA) media type \nof the message body data. The value must be \n`application/json`.\n"
          in: header
          name: Content-Type
          required: true
          schema:
            format: string
            type: string
      requestBody:
        content:
          application/json:
            schema:
              example: MyToastNamingAuthority:9876543210
              type: string
        description: "The JSON string value of the `externalId` for the job \nrecord. Wrap the value in double quotation marks to make it \nvalid JSON syntax.\n"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
          description: |
            Returns the updated job record.
      summary: Add or replace an external identifier
      tags:
        - Jobs
      x-codegen-request-body-name: body
  /timeEntries:
    get:
      description: "Returns an array of `TimeEntry` objects that contain \ninformation about employee shift events. The information \nincludes shift start times, end times, and the start and end \ntimes of break periods.\n\n*  Include one or more `timeEntryId` query parameters set to \n   the GUIDs for specific time entries.\n\n*  Include both a `startDate` and an `endDate` query parameter \n   to get time entries for a specific time period.\n\n*  Include both a `modifiedStartDate` and a `modifiedEndDate` \n   query parameter to get the time entries that were modified \n   during a specific time period.\n\n*  Includes a `businessDate` query parameter to get the time \n   entries with an `inDate` during a specific business date.\n\nValid requests include one or more `timeEntryId` parameters, \nboth a `startDate` and an `endDate`, both a `modifiedStartDate` \nand a `modifiedEndDate`, or a `businessDate`.\n"
      operationId: timeEntriesGet
      parameters:
        - description: "The Toast platform GUID of the restaurant that is the \ncontext for this operation.\n"
          in: header
          name: Toast-Restaurant-External-ID
          required: true
          schema:
            format: string
            type: string
        - description: "Optional array of one or more time entry identifiers, \neither the Toast platform GUID or an external identifier. \n100 max.\n"
          explode: false
          in: query
          name: timeEntryIds
          schema:
            items:
              type: string
            type: array
          style: form
        - description: "Optional start date and time of time period to match time \nentries. A time entry matches the time period if its \nclock-in `inDate` is after (inclusive) the specified \n`startDate` and before (exclusive) the `endDate`. The \nspecified period cannot be longer than one month.\n"
          in: query
          name: startDate
          schema:
            format: ISO-8601
            type: string
        - description: "Optional end date and time of time period to match time \nentries. A time entry matches the time period if its \nclock-in `inDate` is after (inclusive) the specified \n`startDate` and before (exclusive) the `endDate`. The \nspecified period cannot be longer than one month.\n"
          in: query
          name: endDate
          schema:
            format: ISO-8601
            type: string
        - description: "Start date and time of the time period to match modified \ntime entries. A time entry matches the time period if that \nentry was modified after (inclusive) the \n`modifiedStartDate`. If you include this parameter, you \nmust also include the `modifiedEndDate` parameter.  The \nspecified period cannot be longer than one month.\n"
          in: query
          name: modifiedStartDate
          schema:
            format: ISO-8601
            type: string
        - description: "End date and time of the time period to match modified time \nentries. A time entry matches the time period if that entry \nwas modified before (exclusive) the `modifiedEndDate`. If \nyou include this parameter, you must also include the \n`modifiedStartDate` parameter.  The specified period cannot \nbe longer than one month.\n"
          in: query
          name: modifiedEndDate
          schema:
            format: ISO-8601
            type: string
        - description: "Optional date to match time entries. A time entry matches \nthe business date if its clock-in `inDate` is during the \nbusiness date. The cutoff from one `businessDate` to the \nnext is the `closeoutHour` for the restaurant.\n"
          in: query
          name: businessDate
          schema:
            format: yyyymmdd
            type: string
        - description: "Optional flag to indicate whether missed breaks should be \nreturned in the breaks array for the time entries.\n"
          in: query
          name: includeMissedBreaks
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TimeEntry'
                title: Response
                type: array
          description: |
            Returns the specified time entries.
        "500":
          content: {}
          description: "An unexpected internal error occurred. There is a \n`requestId` attached to this error that can be referenced \nby Toast support.\n"
      summary: Get time entries
      tags:
        - Time entries
  /timeEntries/{timeEntryId}:
    get:
      description: "Returns a `TimeEntry` object containing information about one \nemployee shift. The information includes the shift start time, \nend time, and the start and end times of break periods.\n"
      operationId: timeEntriesTimeEntryIdGet
      parameters:
        - description: "The Toast platform GUID of the restaurant that is the \ncontext for this operation.\n"
          in: header
          name: Toast-Restaurant-External-ID
          required: true
          schema:
            format: string
            type: string
        - description: "The Toast platform GUID or an external identifier for the \ntime entry.\n"
          in: path
          name: timeEntryId
          required: true
          schema:
            format: string
            type: string
        - description: "Optional flag to indicate whether missed breaks should be \nreturned in the breaks array for the time entries.\n"
          in: query
          name: includeMissedBreaks
          schema:
            type: boolean
        - description: |
            Controls whether the response includes an archived time entry.
            Optional.
          in: query
          name: includeArchived
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeEntry'
          description: |
            Returns the specified time entry.
        "400":
          content: {}
          description: |
            The GUID or external identifier was malformed.
        "500":
          content: {}
          description: "An unexpected internal error occurred. There is a \n`requestId` attached to this error that can be referenced \nby Toast support.\n"
      summary: Get one time entry
      tags:
        - Time entries
components:
  schemas:
    Employee:
      allOf:
        - $ref: '#/components/schemas/ExternalReference'
        - $ref: '#/components/schemas/Employee_allOf'
      description: A restaurant employee
    Job:
      allOf:
        - $ref: '#/components/schemas/ExternalReference'
        - $ref: '#/components/schemas/Job_allOf'
      description: A restaurant job.
    JobWageOverride:
      description: "The overriding job wage, for an employee that has a wage that \ndiffers from the job's default wage.\n"
      properties:
        wage:
          description: |
            Required currency value of the employee's overriding job wage.
          format: double
          type: number
        jobReference:
          $ref: '#/components/schemas/ExternalReference'
      required:
        - jobReference
        - wage
      type: object
    Shift:
      allOf:
        - $ref: '#/components/schemas/ExternalReference'
        - $ref: '#/components/schemas/Shift_allOf'
      description: "A scheduled shift in the Toast platform used to enforce employee \nclock-in and clock outs. Shifts might be created in an external \nscheduling system and pushed to the Toast platform.\n"
    TimeEntry:
      allOf:
        - $ref: '#/components/schemas/ExternalReference'
        - $ref: '#/components/schemas/TimeEntry_allOf'
      description: "A `TimeEntry` captures the actual time an employee worked or took \na break. Typically, a time entry is one-to-one with a scheduled \nshift, but it is possible in the Toast platform for an employee \nto clock-in and clock-out without a shift.\n"
    TimeEntryBreak:
      description: |
        Information about a period of time that an employee is not
        working during a shift. For example, an employee might take a
        break to eat at some time during a shift. An employee can be paid
        or unpaid for the break period.
      properties:
        guid:
          description: |
            The GUID maintained by the Toast platform.
          type: string
        breakType:
          $ref: '#/components/schemas/ToastReference'
        paid:
          description: |
            Indicates whether the employee was paid for the break.
            * `true` - The break was a paid break.
            * `false` - The break was an unpaid break.
          type: boolean
        inDate:
          description: |
            The date and time that the employee started the break period,
            in UTC.
          format: date-time
          type: string
        outDate:
          description: |
            The date and time that the employee ended the break period
            and returned to work, in UTC.
          format: date-time
          type: string
        missed:
          description: |
            Indicates whether the break was a missed break.
            * `true` - The break was missed.
            * `false` - The break was taken.
          type: boolean
        auditResponse:
          description: "Indicates whether the employee was asked to take the break.\n\n* `true` - The employee was asked to take the break.\n* `false` - The employee was not asked to take the break.\n\nNull for break types that do not use break acknowledgement \ntracking or when the employee did not complete the audit \nresponse prompt.\n"
          type: boolean
      type: object
    ExternalReference:
      allOf:
        - $ref: '#/components/schemas/ToastReference'
        - $ref: '#/components/schemas/ExternalReference_allOf'
      description: "A wrapper object with fields that allow reference to a Toast \nplatform entity by Toast GUID or an external identifier.\n"
    ToastReference:
      description: "A wrapper object with fields that allow reference to a Toast \nplatform entity by Toast GUID.\n"
      properties:
        guid:
          description: |
            The GUID maintained by the Toast platform.
          type: string
        entityType:
          description: |
            The type of object this is.
          type: string
      required:
        - entityType
        - guid
      type: object
    Employee_allOf:
      properties:
        createdDate:
          description: |
            Date created, in UTC format (read-only).
          format: date-time
          type: string
        modifiedDate:
          description: |
            Date modified, in UTC format (read-only).
          format: date-time
          type: string
        deletedDate:
          description: |
            Date deleted, in UTC format (read-only).
          format: date-time
          type: string
        firstName:
          description: |
            Optional, first name of the employee.
          type: string
        chosenName:
          description: |
            Optional, chosen name of the employee. To be used, when appropriate, in place of first name.
          type: string
        lastName:
          description: |
            Optional, last name of the employee.
          type: string
        email:
          description: |
            Employee's email address.
          type: string
        phoneNumber:
          description: |
            Employee's phone number
          type: string
        passcode:
          description: "An optional numeric security code that a new employee can \nuse to begin a session in a Toast POS device. The \npasscode value can only occur in `POST` requests. The \nvalue must be numeric and it must contain at least one \nand no more than eight digits. The employee can only use \nthe passcode at the restaurant specified in the `POST` \nrequest.   The response to a successful `POST` request \nwill include the passcode value in clear text. A `GET` \nrequest for the employee will not return the passcode.\n"
          type: string
        externalEmployeeId:
          description: |
            Optional, employee’s external ID in the Toast platform.
          type: string
        deleted:
          description: |
            If the employee is deleted in the Toast platform.
          type: boolean
        disabled:
          description: "An employee's Toast platform account may be disabled if \nthat employee is suspected of fraud or other behavior \nagainst the terms of service. If `true`, no shifts should \nbe scheduled for this employee.\n"
          type: boolean
        jobReferences:
          description: "An array of external references to jobs assigned to this \nemployee.\n"
          items:
            $ref: '#/components/schemas/ExternalReference'
          minItems: 0
          type: array
        wageOverrides:
          description: "An optional array of per job wage overrides, where each \nelement defines a job reference and the wage override for \nthis employee when performing that job.\n"
          items:
            $ref: '#/components/schemas/JobWageOverride'
          minItems: 0
          type: array
        v2EmployeeGuid:
          description: "This value is included for future use. An alternate Toast \nplatform GUID for the employee that will be used in \nupcoming labor API functionality.\n"
          type: string
      type: object
      example: null
    Job_allOf:
      properties:
        createdDate:
          description: |
            Date created, in UTC format (read-only).
          format: date-time
          type: string
        modifiedDate:
          description: |
            Date modified, in UTC format (read-only).
          format: date-time
          type: string
        deletedDate:
          description: |
            Date deleted, in UTC format (read-only).
          format: date-time
          type: string
        title:
          description: |
            Title of the job.
          type: string
        deleted:
          description: |
            If the job is deleted in the Toast platform.
          type: boolean
        wageFrequency:
          description: "An enumerated type specifying how to interpret the \ndefault wage for this job.\n"
          enum:
            - HOURLY
            - SALARY
          type: string
        defaultWage:
          description: |
            The default wage of the job.
          format: double
          type: number
        tipped:
          description: |
            Indicates whether the job receives gratuities (tips).
          type: boolean
        code:
          description: "A reference identifier for the job. This is an optional \nfield entered when the job is created. For example, it \ncan be used to match Toast platform jobs to jobs \nconfigured in external labor management systems.\n"
          type: string
      type: object
      example: null
    Shift_allOf:
      properties:
        createdDate:
          description: |
            Date created, in UTC format (read-only).
          format: date-time
          type: string
        modifiedDate:
          description: |
            Date modified, in UTC format (read-only).
          format: date-time
          type: string
        deletedDate:
          description: |
            Date deleted, in UTC format (read-only).
          format: date-time
          type: string
        deleted:
          description: |
            If the shift is deleted in the Toast platform.
          type: boolean
        jobReference:
          $ref: '#/components/schemas/ExternalReference'
        employeeReference:
          $ref: '#/components/schemas/ExternalReference'
        inDate:
          description: "Timestamp of the beginning of the shift. This is when the \nemployee can clock in. Expressed in the UTC time zone.\n"
          format: date-time
          type: string
        outDate:
          description: "Timestamp of the end of the shift. This is when the \nemployee can clock out. Expressed in the UTC time zone.\n"
          format: date-time
          type: string
      type: object
      example: null
    TimeEntry_allOf:
      properties:
        createdDate:
          description: |
            Date created, in UTC format (read-only).
          format: date-time
          type: string
        modifiedDate:
          description: |
            Date modified, in UTC format (read-only).
          format: date-time
          type: string
        deletedDate:
          description: |
            Date deleted, in UTC format (read-only).
          format: date-time
          type: string
        deleted:
          description: |
            If the time entry is deleted in the Toast platform.
          type: boolean
        jobReference:
          $ref: '#/components/schemas/ExternalReference'
        employeeReference:
          $ref: '#/components/schemas/ExternalReference'
        shiftReference:
          $ref: '#/components/schemas/ExternalReference'
        inDate:
          description: |
            The date and time that an employee clocked in to a work
            shift.
          format: date-time
          type: string
        outDate:
          description: |
            The date and time that an employee closed a work shift.
            If the employee has not closed the shift this field is
            null.
          format: date-time
          type: string
        autoClockedOut:
          description: |
            Indicates whether the Toast platform automatically clocked the
            employee out of their shift at the end of the restaurant business
            day. For more information, see [the Toast platform guide section
            about automatic clock-out and time
            entries](https://doc.toasttab.com/doc/platformguide/adminEffectOfAutoclockOutOnBreakEntries.html).
          type: boolean
        businessDate:
          description: "The business date of `inDate`, in the format of \n\"yyyymmdd\".\n"
          type: string
        regularHours:
          description: "Regular hours worked by the employee for this time entry, \nexcluding breaks.\n"
          format: double
          type: number
        overtimeHours:
          description: "Any overtime hours taken by this employee during this \ntime entry.\n"
          format: double
          type: number
        hourlyWage:
          description: "Optional, historical `hourlyWage`; that is, the wage in \neffect when the time entry was made. The current \n`hourlyWage` for the employee (or job) may be different. \nThis will be null if the job is `SALARY`.\n"
          format: double
          type: number
        breaks:
          description: "An optional array of time entry breaks, each break \ndefining a clock-in date, clock-out date, and whether or \nnot the break was paid.\n"
          items:
            $ref: '#/components/schemas/TimeEntryBreak'
          minItems: 0
          type: array
        declaredCashTips:
          description: |
            The currency amount of tips paid in cash during the time
            entry. This does not include service charges applied as
            automatic gratuities. If the employee has not closed the
            shift, this value is not final and may change. If the
            `outDate` value is set, the `declaredCashTips` value is
            final.
          format: double
          type: number
        nonCashTips:
          description: |
            The currency amount of tips paid using non-cash tender
            during the time entry. For example, this includes credit
            card tips. This does not include service charges applied
            as automatic gratuities. If the employee has not closed
            the shift, this value is not final and may change. If the
            `outDate` value is set, the `nonCashTips` value is final.
          format: double
          type: number
        cashGratuityServiceCharges:
          description: |
            The currency amount of service charges applied as
            automatic gratuities that were paid in cash during the
            time entry. If the employee has not closed the shift,
            this value is not final and may change. If the `outDate`
            value is set, the `cashGratuityServiceCharges` value is
            final.
          format: double
          type: number
        nonCashGratuityServiceCharges:
          description: |
            The currency amount of service charges applied as
            automatic gratuities that were paid using non-cash tender
            during the time entry. If the employee has not closed the
            shift, this value is not final and may change. If the
            `outDate` value is set, the
            `nonCashGratuityServiceCharges` value is final.
          format: double
          type: number
        tipsWithheld:
          description: "The currency amount withheld from the employee's credit \ncard tips during the time entry. The amount withheld is \ncalculated as a percentage of tips added to credit card \npayments. If the employee has not closed the shift (the \n`outDate` value is null), the `tipsWithheld` value is not \nfinal and may change. If the employee has closed the \nshift (the `outDate` value is set), the `tipsWithheld` \nvalue is final.\n"
          format: double
          type: number
        nonCashSales:
          description: "The currency amount of non-cash sales during the time \nentry. The value includes the order amounts and tax.\nIt does not include tips.\n\nIf the employee has not closed the shift, this \nvalue is `0`. If the `outDate` value is set, then the \n`nonCashSales` value is final.\n"
          format: double
          type: number
        cashSales:
          description: "The currency amount of sales paid for in cash during the \ntime entry. The value includes the order amounts and tax.\nIt does not include tips.\n\nIf the employee has not closed the shift, \nthis value is `0`. If the `outDate` value is set, \nthen the `cashSales` value is final.\n"
          format: double
          type: number
      type: object
      example: null
    ExternalReference_allOf:
      properties:
        externalId:
          description: "External identifier string that is prefixed by the naming \nauthority. You can, for example, use the labor API to \n`POST` an `externalId` for an employee and then `GET` the \nemployee with that `externalId`.\n"
          type: string
      type: object
      example: null
x-original-swagger-version: "2.0"
